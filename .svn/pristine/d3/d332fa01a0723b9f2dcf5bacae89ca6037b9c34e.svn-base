<?php namespace {$GLOBALS['_beginTime'] = microtime(TRUE);$GLOBALS['_startUseMems'] = memory_get_usage(); defined('CHARSET') or define('CHARSET','utf-8'); defined('APP_DEBUG') or define('APP_DEBUG',true); defined('SITE_PATH') or define('SITE_PATH','D:\\phpStudy\\WWW\\coding'); defined('APP_PATH') or define('APP_PATH','D:\\phpStudy\\WWW\\coding/Application/'); defined('RUNTIME_PATH') or define('RUNTIME_PATH','D:\\phpStudy\\WWW\\coding/~runtime/'); defined('HTTP_REFERER') or define('HTTP_REFERER',''); defined('IN_TPCMS') or define('IN_TPCMS',true); defined('TPL_PATH') or define('TPL_PATH','D:\\phpStudy\\WWW\\coding/templates/'); defined('MEMORY_LIMIT_ON') or define('MEMORY_LIMIT_ON',true); defined('THINK_VERSION') or define('THINK_VERSION','3.2.2'); defined('URL_COMMON') or define('URL_COMMON',0); defined('URL_PATHINFO') or define('URL_PATHINFO',1); defined('URL_REWRITE') or define('URL_REWRITE',2); defined('URL_COMPAT') or define('URL_COMPAT',3); defined('EXT') or define('EXT','.class.php'); defined('THINK_PATH') or define('THINK_PATH','D:\\phpStudy\\WWW\\coding\\Application\\Framework/'); defined('APP_STATUS') or define('APP_STATUS',''); defined('APP_MODE') or define('APP_MODE','common'); defined('STORAGE_TYPE') or define('STORAGE_TYPE','File'); defined('LIB_PATH') or define('LIB_PATH','D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/'); defined('CORE_PATH') or define('CORE_PATH','D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/'); defined('BEHAVIOR_PATH') or define('BEHAVIOR_PATH','D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Behavior/'); defined('MODE_PATH') or define('MODE_PATH','D:\\phpStudy\\WWW\\coding\\Application\\Framework/Mode/'); defined('VENDOR_PATH') or define('VENDOR_PATH','D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Vendor/'); defined('COMMON_PATH') or define('COMMON_PATH','D:\\phpStudy\\WWW\\coding/Application/Common/'); defined('CONF_PATH') or define('CONF_PATH','D:\\phpStudy\\WWW\\coding/Application/Common/Conf/'); defined('LANG_PATH') or define('LANG_PATH','D:\\phpStudy\\WWW\\coding/Application/Common/Lang/'); defined('HTML_PATH') or define('HTML_PATH','D:\\phpStudy\\WWW\\coding/Application/Html/'); defined('LOG_PATH') or define('LOG_PATH','D:\\phpStudy\\WWW\\coding/~runtime/Logs/'); defined('TEMP_PATH') or define('TEMP_PATH','D:\\phpStudy\\WWW\\coding/~runtime/Temp/'); defined('DATA_PATH') or define('DATA_PATH','D:\\phpStudy\\WWW\\coding/~runtime/Data/'); defined('CACHE_PATH') or define('CACHE_PATH','D:\\phpStudy\\WWW\\coding/~runtime/Cache/'); defined('CONF_EXT') or define('CONF_EXT','.php'); defined('CONF_PARSE') or define('CONF_PARSE',''); defined('MAGIC_QUOTES_GPC') or define('MAGIC_QUOTES_GPC',false); defined('IS_CGI') or define('IS_CGI',1); defined('IS_WIN') or define('IS_WIN',1); defined('IS_CLI') or define('IS_CLI',0); defined('_PHP_FILE_') or define('_PHP_FILE_','/index.php'); defined('__ROOT__') or define('__ROOT__',''); }namespace {function C($name=null, $value=null,$default=null) { static $_config = array(); if (empty($name)) { return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtoupper($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : $default; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtoupper($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : $default; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name,CASE_UPPER)); return; } return null; } function load_config($file,$parse=CONF_PARSE){ $ext = pathinfo($file,PATHINFO_EXTENSION); switch($ext){ case 'php': return include $file; case 'ini': return parse_ini_file($file); case 'yaml': return yaml_parse_file($file); case 'xml': return (array)simplexml_load_file($file); case 'json': return json_decode(file_get_contents($file), true); default: if(function_exists($parse)){ return $parse($file); }else{ E(L('_NOT_SUPPERT_').':'.$ext); } } } function E($msg, $code=0) { throw new Think\Exception($msg, $code); } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)){ return isset($_lang[$name]) ? $_lang[$name] : $name; }elseif(is_array($value)){ $replace = array_keys($value); foreach($replace as &$v){ $v = '{$'.$v.'}'; } return str_replace($replace,$value,isset($_lang[$name]) ? $_lang[$name] : $name); } $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { return Think\Think::trace($value,$label,$level,$record); } function compile($filename) { $content = php_strip_whitespace($filename); $content = trim(substr($content, 5)); $content = preg_replace('/\/\/\[RUNTIME\](.*?)\/\/\[\/RUNTIME\]/s', '', $content); if(0===strpos($content,'namespace')){ $content = preg_replace('/namespace\s(.*?);/','namespace \\1{',$content,1); }else{ $content = 'namespace {'.$content; } if ('?>' == substr($content, -2)) $content = substr($content, 0, -2); return $content.'}'; } function T($template='',$layer=''){ if(false === strpos($template,'://')){ $template = 'http://'.str_replace(':', '/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $module = isset($info['user'])?$info['user'].'/':MODULE_NAME.'/'; $extend = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); $auto = C('AUTOLOAD_NAMESPACE'); if($auto && isset($auto[$extend])){ $baseUrl = $auto[$extend].$module.$layer.'/'; }elseif(C('VIEW_PATH')){ $baseUrl = C('VIEW_PATH'); }elseif(defined('TMPL_PATH')){ $baseUrl = TMPL_PATH.$module; }else{ $baseUrl = APP_PATH.$module.$layer.'/'; } $theme = substr_count($file,'/')<2 ? C('DEFAULT_THEME') : ''; $depr = C('TMPL_FILE_DEPR'); if('' == $file) { $file = CONTROLLER_NAME . $depr . ACTION_NAME; }elseif(false === strpos($file, '/')){ $file = CONTROLLER_NAME . $depr . $file; }elseif('/' != $depr){ $file = substr_count($file,'/')>1 ? substr_replace($file,$depr,strrpos($file,'/'),1) : str_replace('/', $depr, $file); } return $baseUrl.($theme?$theme.'/':'').$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null,$datas=null) { if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } switch(strtolower($method)) { case 'get' : $input =& $_GET;break; case 'post' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php://input'), $input);break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php://input'), $input); break; default: $input = $_GET; } break; case 'path' : $input = array(); if(!empty($_SERVER['PATH_INFO'])){ $depr = C('URL_PATHINFO_DEPR'); $input = explode($depr,trim($_SERVER['PATH_INFO'],$depr)); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; case 'data' : $input =& $datas; break; default: return NULL; } if(''==$name) { $data = $input; array_walk_recursive($data,'filter_exp'); $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { if(is_string($filters)){ $filters = explode(',',$filters); } foreach($filters as $filter){ $data = array_map_recursive($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; is_array($data) && array_walk_recursive($data,'filter_exp'); $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { if(is_string($filters)){ $filters = explode(',',$filters); }elseif(is_int($filters)){ $filters = array($filters); } foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map_recursive($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) { return isset($default)?$default:NULL; } } } } }else{ $data = isset($default)?$default:NULL; } return $data; } function array_map_recursive($filter, $data) { $result = array(); foreach ($data as $key => $val) { $result[$key] = is_array($val) ? array_map_recursive($filter, $val) : call_user_func($filter, $val); } return $result; } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if(false !== $save){ S('N_'.$key,$_num[$key],$save); } } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace_callback('/_([a-zA-Z])/', function($match){return strtoupper($match[1]);}, $name)); } else { return strtolower(trim(preg_replace("/[A-Z]/", "_\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && APP_DEBUG) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext=EXT) { static $_file = array(); $class = str_replace(array('.', '#'), array('/', '.'), $class); if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('/', $class); if (empty($baseUrl)) { if ('@' == $class_strut[0] || MODULE_NAME == $class_strut[0]) { $baseUrl = MODULE_PATH; $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); }elseif (in_array($class_strut[0],array('Think','Org','Behavior','Com','Vendor')) || is_dir(LIB_PATH.$class_strut[0])) { $baseUrl = LIB_PATH; }else { $baseUrl = APP_PATH; } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@/')) { $baseUrl = MODULE_PATH.'Common/'; $name = substr($name, 2); } else { $array = explode('/', $name); $baseUrl = APP_PATH . array_shift($array).'/Common/'; $name = implode('/',$array); } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function D($name='',$layer='') { if(empty($name)) return new Think\Model; static $_model = array(); $layer = $layer? : C('DEFAULT_M_LAYER'); if(isset($_model[$name.$layer])) return $_model[$name.$layer]; $class = parse_res_name($name,$layer); if(class_exists($class)) { $model = new $class(basename($name)); }elseif(false === strpos($name,'/')){ if(!C('APP_USE_NAMESPACE')){ import('Common/'.$layer.'/'.$class); }else{ $class = '\\Common\\'.$layer.'\\'.$name.$layer; } $model = class_exists($class)? new $class($name) : new Think\Model($name); }else { Think\Log::record('D方法实例化没找到模型类'.$class,Think\Log::NOTICE); $model = new Think\Model(basename($name)); } $_model[$name.$layer] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Think\\Model'; } $guid = (is_array($connection)?implode('',$connection):$connection).$tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function parse_res_name($name,$layer,$level=1){ if(strpos($name,'://')) { list($extend,$name) = explode('://',$name); }else{ $extend = ''; } if(strpos($name,'/') && substr_count($name, '/')>=$level){ list($module,$name) = explode('/',$name,2); }else{ $module = MODULE_NAME; } $array = explode('/',$name); if(!C('APP_USE_NAMESPACE')){ $class = parse_name($name, 1); import($module.'/'.$layer.'/'.$class.$layer); }else{ $class = $module.'\\'.$layer; foreach($array as $name){ $class .= '\\'.parse_name($name, 1); } if($extend){ $class = $extend.'\\'.$class; } } return $class.$layer; } function controller($name,$path=''){ $layer = C('DEFAULT_C_LAYER'); if(!C('APP_USE_NAMESPACE')){ $class = parse_name($name, 1); import(MODULE_NAME.'/'.$layer.'/'.$class.$layer); }else{ $class = MODULE_NAME.'\\'.($path?$path.'\\':'').$layer; $array = explode('/',$name); foreach($array as $name){ $class .= '\\'.parse_name($name, 1); } $class .= $layer; } if(class_exists($class)) { return new $class(); }else { return false; } } function A($name,$layer='',$level='') { static $_action = array(); $layer = $layer? : C('DEFAULT_C_LAYER'); $level = $level? : ($layer == C('DEFAULT_C_LAYER')?C('CONTROLLER_LEVEL'):1); if(isset($_action[$name.$layer])) return $_action[$name.$layer]; $class = parse_res_name($name,$layer,$level); if(class_exists($class)) { $action = new $class(); $_action[$name.$layer] = $action; return $action; } else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function tag($tag, &$params=NULL) { return \Think\Hook::listen($tag,$params); } function B($name, $tag='',&$params=NULL) { if(''==$tag){ $name .= 'Behavior'; } return \Think\Hook::exec($name,$tag,$params); } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function throw_exception($msg, $type='Think\\Exception', $code=0) { Think\Log::record('建议使用E方法替代throw_exception',Think\Log::NOTICE); if (class_exists($type, false)) throw new $type($msg, $code); else Think\Think::halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('/\]\=\>\n(\s+)/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { $rule = is_array($rule)?$rule[0]:$rule; if(false === strpos($key,'*') && 0=== strpos($url,$rule)) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule)); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); $urlCase = C('URL_CASE_INSENSITIVE'); if($url) { if(0=== strpos($url,'/')) { $route = true; $url = substr($url,1); if('/' != $depr) { $url = str_replace('/',$depr,$url); } }else{ if('/' != $depr) { $url = str_replace('/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $varModule = C('VAR_MODULE'); $varController = C('VAR_CONTROLLER'); $varAction = C('VAR_ACTION'); $var[$varAction] = !empty($path)?array_pop($path):ACTION_NAME; $var[$varController] = !empty($path)?array_pop($path):CONTROLLER_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[$varController])])) { $maps = $maps[strtolower($var[$varController])]; if($action = array_search(strtolower($var[$varAction]),$maps)){ $var[$varAction] = $action; } } } if($maps = C('URL_CONTROLLER_MAP')) { if($controller = array_search(strtolower($var[$varController]),$maps)){ $var[$varController] = $controller; } } if($urlCase) { $var[$varController] = parse_name($var[$varController]); } $module = ''; if(!empty($path)) { $var[$varModule] = array_pop($path); }else{ if(C('MULTI_MODULE')) { if(MODULE_NAME != C('DEFAULT_MODULE') || !C('MODULE_ALLOW_LIST')){ $var[$varModule]= MODULE_NAME; } } } if($maps = C('URL_MODULE_MAP')) { if($_module = array_search(strtolower($var[$varModule]),$maps)){ $var[$varModule] = $_module; } } if(isset($var[$varModule])){ $module = $var[$varModule]; unset($var[$varModule]); } } } $rule = $var; $rule[C('VAR_MODULE')] = $module; $url_rewrite = url_rewrite($rule, $vars, $domain); if($url_rewrite) return $url_rewrite; if(C('URL_MODEL') == 0) { $url = __APP__.'?'.C('VAR_MODULE')."={$module}&".http_build_query(array_reverse($var)); if($urlCase){ $url = strtolower($url); } if(!empty($vars)) { $vars = http_build_query($vars); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'/'.rtrim($url,$depr); }else{ $module = defined('BIND_MODULE') ? '' : $module; $url = __APP__.'/'.($module?$module.MODULE_PATHINFO_DEPR:'').implode($depr,array_reverse($var)); } if($urlCase){ $url = strtolower($url); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https://':'http://').$domain.$url; } return $url; } function W($name, $data=array()) { return R($name,$data,'Widget'); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\n", "\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options) && empty($cache)){ $type = isset($options['type'])?$options['type']:''; $cache = Think\Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Think\Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Think\Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { if(false !== strpos($name,'*')){ return false; }else{ unset($_cache[$name]); return Think\Storage::unlink($filename,'F'); } } else { Think\Storage::put($filename,serialize($value),'F'); $_cache[$name] = $value; return ; } } if (isset($_cache[$name])) return $_cache[$name]; if (Think\Storage::has($filename,'F')){ $value = unserialize(Think\Storage::read($filename,'F')); $_cache[$name] = $value; } else { $value = false; } return $value; } function to_guid_string($mix) { if (is_object($mix)) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\"{$value}\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\"1.0\" encoding=\"{$encoding}\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "</{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\"{$key}\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "</{$key}>"; } return $xml; } function session($name='',$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } if('common' != APP_MODE){ ini_set('session.auto_start', 0); } if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $type = C('SESSION_TYPE'); $class = strpos($type,'\\')? $type : 'Think\\Session\\Driver\\'. ucwords(strtolower($type)); $hander = new $class(); session_set_save_handler( array(&$hander,"open"), array(&$hander,"close"), array(&$hander,"read"), array(&$hander,"write"), array(&$hander,"destroy"), array(&$hander,"gc")); } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(''===$name){ return $prefix ? $_SESSION[$prefix] : $_SESSION; }elseif(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } }else{ if($prefix){ if (!isset($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } function cookie($name='', $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), 'httponly' => C('COOKIE_HTTPONLY'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if(!empty($config['httponly'])){ ini_set("session.cookie_httponly", 1); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; }elseif('' === $name){ return $_COOKIE; } $name = $config['prefix'] . str_replace('.', '_', $name); if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file($path) { if($files = C('LOAD_EXT_FILE')) { $files = explode(',',$files); foreach ($files as $file){ $file = $path.'Common/'.$file.'.php'; if(is_file($file)) include $file; } } if($configs = C('LOAD_EXT_CONFIG')) { if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = $path.'Conf/'.$config.CONF_EXT; if(is_file($file)) { is_numeric($key)?C(load_config($file)):C($key,load_config($file)); } } } } function get_client_ip($type = 0,$adv=false) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if($adv){ if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); } } function filter_exp(&$value){ if (in_array(strtolower($value),array('exp','or'))){ $value .= ' '; } } function in_array_case($value,$array){ return in_array(strtolower($value),array_map('strtolower',$array)); }}namespace {helpers('time'); helpers('extention'); function get_sysinfo() { $sys_info['os'] = PHP_OS; $sys_info['zlib'] = function_exists('gzclose'); $sys_info['safe_mode'] = (boolean) ini_get('safe_mode'); $sys_info['safe_mode_gid'] = (boolean) ini_get('safe_mode_gid'); $sys_info['timezone'] = function_exists("date_default_timezone_get") ? date_default_timezone_get() : L('no_setting'); $sys_info['socket'] = function_exists('fsockopen') ; $sys_info['web_server'] = strpos($_SERVER['SERVER_SOFTWARE'], 'PHP')===false ? $_SERVER['SERVER_SOFTWARE'].'PHP/'.phpversion() : $_SERVER['SERVER_SOFTWARE']; $sys_info['phpv'] = phpversion(); $sys_info['mysqlv'] = mysql_get_server_info(); $sys_info['fileupload'] = @ini_get('file_uploads') ? ini_get('upload_max_filesize') :'unknown'; $sys_info['mysqlsize'] = M()->query("select round(sum(DATA_LENGTH/1024/1024)+sum(DATA_LENGTH/1024/1024),2) as db_length from information_schema.tables 
where table_schema='".C('DB_NAME')."'"); $sys_info['mysqlsize'] = $sys_info['mysqlsize'][0]['db_length']; return $sys_info; } function getcache($file, $dir = NULL) { $fileName = (!is_null($dir) ? 'caches_'.$dir.'/'.$file : $file); return F($fileName); } function setcache($file, $value = NULL, $dir = NULL) { $fileName = (!is_null($dir) ? 'caches_'.$dir.'/'.$file : $file); return F($fileName, $value); } function delcache($file, $dir = NULL) { $fileName = (!is_null($dir) ? 'caches_'.$dir.'/'.$file : $file); return F($fileName, NULL); } function model($name, $layer='') { return D(parse_name($name, 1), $layer); } function diconv($str, $in_charset, $out_charset = CHARSET, $ForceTable = FALSE) { $in_charset = strtoupper($in_charset); $out_charset = strtoupper($out_charset); if(empty($str) || $in_charset == $out_charset) { return $str; } $out = ''; if(!$ForceTable) { if(function_exists('iconv')) { $out = iconv($in_charset, $out_charset.'//IGNORE', $str); } elseif(function_exists('mb_convert_encoding')) { $out = mb_convert_encoding($str, $out_charset, $in_charset); } } return $out; } function _basename($filename){ return preg_replace('/^.+[\\\\\\/]/', '', $filename); } function dimplode($array) { if(!empty($array)) { $array = array_map('addslashes', $array); return "'".implode("','", is_array($array) ? $array : array($array))."'"; } else { return 0; } } function _dfsockopen($url, $limit = 0, $post = '', $cookie = '', $bysocket = FALSE, $ip = '', $timeout = 15, $block = TRUE, $encodetype = 'URLENCODE', $allowcurl = TRUE, $position = 0) { $return = ''; $matches = parse_url($url); $scheme = $matches['scheme']; $host = $matches['host']; $path = $matches['path'] ? $matches['path'].($matches['query'] ? '?'.$matches['query'] : '') : '/'; $port = !empty($matches['port']) ? $matches['port'] : 80; if(function_exists('curl_init') && function_exists('curl_exec') && $allowcurl) { $ch = curl_init(); $ip && curl_setopt($ch, CURLOPT_HTTPHEADER, array("Host: ".$host)); curl_setopt($ch, CURLOPT_URL, $scheme.'://'.($ip ? $ip : $host).':'.$port.$path); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); if($post) { curl_setopt($ch, CURLOPT_POST, 1); if($encodetype == 'URLENCODE') { curl_setopt($ch, CURLOPT_POSTFIELDS, $post); } else { parse_str($post, $postarray); curl_setopt($ch, CURLOPT_POSTFIELDS, $postarray); } } if($cookie) { curl_setopt($ch, CURLOPT_COOKIE, $cookie); } curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); $data = curl_exec($ch); $status = curl_getinfo($ch); $errno = curl_errno($ch); curl_close($ch); if($errno || $status['http_code'] != 200) { return; } else { return !$limit ? $data : substr($data, 0, $limit); } } if($post) { $out = "POST $path HTTP/1.0\r\n"; $header = "Accept: */*\r\n"; $header .= "Accept-Language: zh-cn\r\n"; $boundary = $encodetype == 'URLENCODE' ? '' : '; boundary='.trim(substr(trim($post), 2, strpos(trim($post), "\n") - 2)); $header .= $encodetype == 'URLENCODE' ? "Content-Type: application/x-www-form-urlencoded\r\n" : "Content-Type: multipart/form-data$boundary\r\n"; $header .= "User-Agent: $_SERVER[HTTP_USER_AGENT]\r\n"; $header .= "Host: $host:$port\r\n"; $header .= 'Content-Length: '.strlen($post)."\r\n"; $header .= "Connection: Close\r\n"; $header .= "Cache-Control: no-cache\r\n"; $header .= "Cookie: $cookie\r\n\r\n"; $out .= $header.$post; } else { $out = "GET $path HTTP/1.0\r\n"; $header = "Accept: */*\r\n"; $header .= "Accept-Language: zh-cn\r\n"; $header .= "User-Agent: $_SERVER[HTTP_USER_AGENT]\r\n"; $header .= "Host: $host:$port\r\n"; $header .= "Connection: Close\r\n"; $header .= "Cookie: $cookie\r\n\r\n"; $out .= $header; } $fpflag = 0; if(!$fp = @fsocketopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout)) { $context = array( 'http' => array( 'method' => $post ? 'POST' : 'GET', 'header' => $header, 'content' => $post, 'timeout' => $timeout, ), ); $context = stream_context_create($context); $fp = @fopen($scheme.'://'.($ip ? $ip : $host).':'.$port.$path, 'b', false, $context); $fpflag = 1; } if(!$fp) { return ''; } else { stream_set_blocking($fp, $block); stream_set_timeout($fp, $timeout); @fwrite($fp, $out); $status = stream_get_meta_data($fp); if(!$status['timed_out']) { while (!feof($fp) && !$fpflag) { if(($header = @fgets($fp)) && ($header == "\r\n" || $header == "\n")) { break; } } if($position) { for($i=0; $i<$position; $i++) { $char = fgetc($fp); if($char == "\n" && $oldchar != "\r") { $i++; } $oldchar = $char; } } if($limit) { $return = stream_get_contents($fp, $limit); } else { $return = stream_get_contents($fp); } } @fclose($fp); return $return; } } function Get($url) { if(function_exists('file_get_contents')) { $file_contents = file_get_contents($url); } else { $ch = curl_init(); $timeout = 5; curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout); $file_contents = curl_exec($ch); curl_close($ch); } return $file_contents; } function checkstr($str){ $output=''; $a=ereg('['.chr(0xa1).'-'.chr(0xff).']', $str); $b=ereg('[0-9]', $str); $c=ereg('[a-zA-Z]', $str); if($a && $b && $c){ $output='1';} elseif($a && $b && !$c){ $output='2';} elseif($a && !$b && $c){ $output='3';} elseif(!$a && $b && $c){ $output='4';} elseif($a && !$b && !$c){ $output='5';} elseif(!$a && $b && !$c){ $output='6';} elseif(!$a && !$b && $c){ $output='7';} else{ $output = 8;} return $output; } function isemail($email) { if (!empty($email)) { return preg_match('/^[a-z0-9]+([\+_\-\.]?[a-z0-9]+)*@([a-z0-9]+[\-]?[a-z0-9]+\.)+[a-z]{2,6}$/i', $email); } return FALSE; } function is_mobile($string){ if (!empty($string)) { return preg_match('/^(1(([3578][0-9])|(47)|[8][0126789]))\d{8}$/', $string); } return FALSE; } function genTree($rows, $id='id', $pid='parentid', $son='cell') { $items = array(); foreach ($rows as $row) $items[$row[$id]] = $row; foreach ($items as $item) $items[$item[$pid]][$son][$item[$id]] = &$items[$item[$id]]; return isset($items[0][$son]) ? $items[0][$son] : array(); } function dgmdate($timestamp=0, $format='Y-m-d H:i:s') { $times = intval($timestamp); if(!$times) return false; return date($format,$times); } function random($length, $numeric = 0) { $seed = base_convert(md5(microtime().$_SERVER['DOCUMENT_ROOT']), 16, $numeric ? 10 : 35); $seed = $numeric ? (str_replace('0', '', $seed).'012340567890') : ($seed.'zZ'.strtoupper($seed)); if($numeric) { $hash = ''; } else { $hash = chr(rand(1, 26) + rand(0, 1) * 32 + 64); $length--; } $max = strlen($seed) - 1; for($i = 0; $i < $length; $i++) { $hash .= $seed{mt_rand(0, $max)}; } return $hash; } function getgpc($k, $type='GP') { $type = strtoupper($type); switch($type) { case 'G': $var = &$_GET; break; case 'P': $var = &$_POST; break; case 'C': $var = &$_COOKIE; break; default: if(isset($_GET[$k])) { $var = &$_GET; } else { $var = &$_POST; } break; } return isset($var[$k]) ? $var[$k] : NULL; } function submitcheck($name, $type = 'P') { if(!getgpc($name)) { return FALSE; } else { $type = strtoupper($type); $fromhash = getgpc('fromhash'); switch ($type) { case 'G': return IS_GET; break; case 'GP': return IS_GET || IS_POST; break; default: return IS_POST; break; } if (getgpc('fromhash') == session('FROMHASH')) { return TRUE; } else { return FALSE; } } } function dz_segment($title = '', $content = '', $encode = 'utf-8'){ if($title == ''){ return false; } $title = rawurlencode(strip_tags($title)); $content = strip_tags($content); if(strlen($content)>2400){ $content = mb_substr($content, 0, 800, $encode); } $content = rawurlencode($content); $url = 'http://keyword.discuz.com/related_kw.html?title='.$title.'&content='.$content.'&ics='.$encode.'&ocs='.$encode; $xml_array=simplexml_load_file($url); $result = $xml_array->keyword->result; $data = array(); foreach ($result->item as $key => $value) { array_push($data, (string)$value->kw); } if(count($data) > 0){ return $data; }else{ return false; } } function authcode($string, $operation = 'DECODE', $key = '', $expiry = 0) { $ckey_length = 4; $key = md5($key != '' ? $key : C('AUTHKEY')); $keya = md5(substr($key, 0, 16)); $keyb = md5(substr($key, 16, 16)); $keyc = $ckey_length ? ($operation == 'DECODE' ? substr($string, 0, $ckey_length): substr(md5(microtime()), -$ckey_length)) : ''; $cryptkey = $keya.md5($keya.$keyc); $key_length = strlen($cryptkey); $string = $operation == 'DECODE' ? base64_decode(substr($string, $ckey_length)) : sprintf('%010d', $expiry ? $expiry + time() : 0).substr(md5($string.$keyb), 0, 16).$string; $string_length = strlen($string); $result = ''; $box = range(0, 255); $rndkey = array(); for($i = 0; $i <= 255; $i++) { $rndkey[$i] = ord($cryptkey[$i % $key_length]); } for($j = $i = 0; $i < 256; $i++) { $j = ($j + $box[$i] + $rndkey[$i]) % 256; $tmp = $box[$i]; $box[$i] = $box[$j]; $box[$j] = $tmp; } for($a = $j = $i = 0; $i < $string_length; $i++) { $a = ($a + 1) % 256; $j = ($j + $box[$a]) % 256; $tmp = $box[$a]; $box[$a] = $box[$j]; $box[$j] = $tmp; $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256])); } if($operation == 'DECODE') { if((substr($result, 0, 10) == 0 || substr($result, 0, 10) - time() > 0) && substr($result, 10, 16) == substr(md5(substr($result, 26).$keyb), 0, 16)) { return substr($result, 26); } else { return ''; } } else { return $keyc.str_replace('=', '', base64_encode($result)); } } function daddslashes($string) { if(!is_array($string)) return addslashes($string); foreach($string as $key => $val) $string[$key] = daddslashes($val); return $string; } function dstripslashes($string) { if(!is_array($string)) return stripslashes($string); foreach($string as $key => $val) $string[$key] = dstripslashes($val); return $string; } function new_html_special_chars($string, $flags = null) { return dhtmlspecialchars($string, $flags); } function dhtmlspecialchars($string, $flags = null) { if(is_array($string)) { foreach($string as $key => $val) { $string[$key] = dhtmlspecialchars($val, $flags); } } else { if($flags === null) { $string = str_replace(array('&', '"', '<', '>'), array('&amp;', '&quot;', '&lt;', '&gt;'), $string); if(strpos($string, '&amp;#') !== false) { $string = preg_replace('/&amp;((#(\d{3,5}|x[a-fA-F0-9]{4}));)/', '&\\1', $string); } } else { if(PHP_VERSION < '5.4.0') { $string = htmlspecialchars($string, $flags); } else { if(strtolower(CHARSET) == 'utf-8') { $charset = 'UTF-8'; } else { $charset = 'ISO-8859-1'; } $string = htmlspecialchars($string, $flags, $charset); } } } return $string; } function page($totalRows = 0, $listRows = 20) { $Page = new \Common\Library\Page($totalRows, $listRows); $Page->setConfig('header', '<a class="a1">%TOTAL_ROW%条</a>'); $Page->setConfig('prev', '上一页'); $Page->setConfig('next', '下一页'); $Page->setConfig('theme','%HEADER% %FIRST% %UP_PAGE% %LINK_PAGE% %DOWN_PAGE% %END%'); return $Page->show(); } function showPage($total,$curr,$prePage) { if ($total <=0) { return ''; } $cnt = ceil($total / $prePage); $url = $_SERVER['REQUEST_URI']; $parse = parse_url($url); if (!isset($parse['query'])) { $parse['query'] = 'page=' . $curr; } parse_str($parse['query'],$parms); if (!array_key_exists('page', $parms)) { $parms['page'] = $curr; } if (count($parms) == 1) { $url = $parse['path'] . '?'; } else { unset($parms['page']); $url = $parse['path'] . '?' . http_build_query($parms) . '&'; } $prev = $curr - 1; $next = $curr + 1; if ($prev < 1) { $prevLink = ''; }else { $prevLink = '<a href="' . $url .'page=' . $prev . '" class="prev textAlgin1 color3 border_ddd floatLeft" > < </a>'; } if ($next > $cnt) { $nextLink = ''; }else { $nextLink = '<a href="' . $url .'page=' . $next . '" class="next textAlgin1 color3 border_ddd floatLeft displayB" >  > </a>'; } $start = $curr - (5-1)/2; $end = $curr + (5-1)/2; if ($start < 1) { $end += (1 - $start); $start = 1; if ($end > $cnt) { $end = $cnt; } } if ($end > $cnt) { $start -= ($end - $cnt); $end = $cnt; if ($start < 1) { $start = 1; } } $pageStr = ''; for ($i=$start; $i <= $end ; $i++) { if ($i == $curr) { $pageStr .= '<a href="' . $url . 'page=' . $i . '" class="textAlgin1 color3 border_ddd floatLeft displayB border active">' . $i . '</a>'; continue; } $pageStr .= '<a href="' . $url . 'page=' . $i . '" class="textAlgin1 color3 border_ddd floatLeft displayB border">' . $i . '</a>'; } return $prevLink.$pageStr.$nextLink; } function pages($num, $perpage = 20, $curr_page, $urlrule = '', $array = array(),$setpages = 6) { if(defined('URLRULE') && $urlrule == '') { $urlrule = URLRULE; $array = $GLOBALS['URL_ARRAY']; } elseif($urlrule == '') { $urlrule = url_par('page={$page}'); } $multipage = ''; if($num > $perpage) { $page = $setpages+1; $offset = ceil($setpages/2-1); $pages = ceil($num / $perpage); if (defined('IN_ADMIN') && !defined('PAGES')) define('PAGES', $pages); $from = $curr_page - $offset; $to = $curr_page + $offset; $more = 0; if($page >= $pages) { $from = 2; $to = $pages-1; } else { if($from <= 1) { $to = $page-1; $from = 2; } elseif($to >= $pages) { $from = $pages-($page-2); $to = $pages-1; } $more = 1; } $multipage .= '<a class="page-wa">'.$num.L('page_item').'</a>'; if($curr_page>0) { $multipage .= '<a href="'.pageurl($urlrule, $curr_page-1, $array).'" class="page-wa">'.L('previous').'</a>'; if($curr_page==1) { $multipage .= '<span>1</span>'; } elseif($curr_page > 6 && $more) { $multipage .= '<a href="'.pageurl($urlrule, 1, $array).'">1</a>..'; } else { $multipage .= '<a href="'.pageurl($urlrule, 1, $array).'">1</a>'; } } for($i = $from; $i <= $to; $i++) { if($i != $curr_page) { $multipage .= '<a href="'.pageurl($urlrule, $i, $array).'">'.$i.'</a>'; } else { $multipage .= '<span>'.$i.'</span>'; } } if($curr_page<$pages) { if($curr_page<$pages-5 && $more) { $multipage .= '<em>...</em><a href="'.pageurl($urlrule, $pages, $array).'">'.$pages.'</a><a href="'.pageurl($urlrule, $curr_page+1, $array).'" class="page-wa">'.L('next').'</a>'; } else { $multipage .= '<a href="'.pageurl($urlrule, $pages, $array).'">'.$pages.'</a><a href="'.pageurl($urlrule, $curr_page+1, $array).'" class="page-wa">'.L('next').'</a>'; } } elseif($curr_page==$pages) { $multipage .= '<span>'.$pages.'</span><a href="'.pageurl($urlrule, $curr_page, $array).'" class="page-wa">'.L('next').'</a>'; } else { $multipage .= '<a href="'.pageurl($urlrule, $pages, $array).'">'.$pages.'</a><a href="'.pageurl($urlrule, $curr_page+1, $array).'" class="page-wa">'.L('next').'</a>'; } } return $multipage; } function pageurl($urlrule, $page, $array = array()) { if(strpos($urlrule, '~')) { $urlrules = explode('~', $urlrule); $urlrule = $page < 2 ? $urlrules[0] : $urlrules[1]; } $findme = array('{$page}'); $replaceme = array($page); if (is_array($array)) foreach ($array as $k=>$v) { $findme[] = '{$'.$k.'}'; $replaceme[] = $v; } $url = str_replace($findme, $replaceme, $urlrule); $url = str_replace(array('http://','//','~'), array('~','/','http://'), $url); return remove_xss($url); } function url_par($par, $url = '') { if($url == '') $url = get_url(); $pos = strpos($url, '?'); if($pos === false) { $url .= '?'.$par; } else { $querystring = substr(strstr($url, '?'), 1); parse_str($querystring, $pars); $query_array = array(); foreach($pars as $k=>$v) { if($k != 'page') $query_array[$k] = $v; } $querystring = http_build_query($query_array).'&'.$par; $url = substr($url, 0, $pos).'?'.$querystring; } return $url; } function get_url() { $sys_protocal = isset($_SERVER['SERVER_PORT']) && $_SERVER['SERVER_PORT'] == '443' ? 'https://' : 'http://'; $php_self = $_SERVER['PHP_SELF'] ? safe_replace($_SERVER['PHP_SELF']) : safe_replace($_SERVER['SCRIPT_NAME']); $path_info = isset($_SERVER['PATH_INFO']) ? safe_replace($_SERVER['PATH_INFO']) : ''; $relate_url = isset($_SERVER['REQUEST_URI']) ? safe_replace($_SERVER['REQUEST_URI']) : $php_self.(isset($_SERVER['QUERY_STRING']) ? '?'.safe_replace($_SERVER['QUERY_STRING']) : $path_info); return $sys_protocal.(isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : '').$relate_url; } function string2array($data) { if($data == '') return array(); @eval("\$array = $data;"); return $array; } function array2string($data, $isformdata = 1) { if($data == '') return ''; if($isformdata) $data = dstripslashes($data); return var_export($data, TRUE); } function upload_key($args) { $pc_auth_key = md5(C('AUTH_KEY').$_SERVER['HTTP_USER_AGENT']); $authkey = md5($args.$pc_auth_key); return $authkey; } function _froatURI ($url) { $url = str_replace("：", ":", $url); if(stripos($url,"https://") === 0) { return $url; } else { if(stripos($url,"http://http://") === 0) { $url = str_replace("http://http://", "", $url); } if(stripos($url,"http://") === false) { $url = 'http://'.$url; } } return $url; } function getPinyin($str, $ishead = FALSE, $isclose = TRUE) { global $pinyins; $restr = ''; $str = trim(iconv('UTF-8', 'GBK', $str)); $slen = strlen($str); if($slen < 2) { return $str; } if(count($pinyins) == 0) { $fp = fopen(COMMON_PATH.'/Data/pinyin.dat', 'r'); while(!feof($fp)) { $line = trim(fgets($fp)); $pinyins[$line[0].$line[1]] = substr($line, 3, strlen($line)-3); } fclose($fp); } for($i=0; $i<$slen; $i++) { if(ord($str[$i])>0x80) { $c = $str[$i].$str[$i+1]; $i++; if(isset($pinyins[$c])) { if($ishead=== FALSE) { $restr .= $pinyins[$c]; } else { $restr .= $pinyins[$c][0]; } } else { $restr .= "_"; } } else if( preg_match("/[a-z0-9]/i", $str[$i])) { $restr .= $str[$i]; } else { $restr .= "_"; } } if($isclose === TRUE) { unset($pinyins); } return $restr; } function is_ie() { $useragent = strtolower($_SERVER['HTTP_USER_AGENT']); if((strpos($useragent, 'opera') !== false) || (strpos($useragent, 'konqueror') !== false)) return false; if(strpos($useragent, 'msie ') !== false) return true; return false; } function trim_script($str) { if(is_array($str)){ foreach ($str as $key => $val){ $str[$key] = trim_script($val); } }else{ $str = preg_replace ( '/\<([\/]?)script([^\>]*?)\>/si', '&lt;\\1script\\2&gt;', $str ); $str = preg_replace ( '/\<([\/]?)iframe([^\>]*?)\>/si', '&lt;\\1iframe\\2&gt;', $str ); $str = preg_replace ( '/\<([\/]?)frame([^\>]*?)\>/si', '&lt;\\1frame\\2&gt;', $str ); $str = str_replace ( 'javascript:', 'javascript：', $str ); } return $str; } function str_cut($string, $length, $dot = '...') { $strlen = strlen($string); if($strlen <= $length) return $string; $string = str_replace(array(' ','&nbsp;', '&amp;', '&quot;', '&#039;', '&ldquo;', '&rdquo;', '&mdash;', '&lt;', '&gt;', '&middot;', '&hellip;'), array('∵',' ', '&', '"', "'", '“', '”', '—', '<', '>', '·', '…'), $string); $strcut = ''; $length = intval($length-strlen($dot)-$length/3); $n = $tn = $noc = 0; while($n < strlen($string)) { $t = ord($string[$n]); if($t == 9 || $t == 10 || (32 <= $t && $t <= 126)) { $tn = 1; $n++; $noc++; } elseif(194 <= $t && $t <= 223) { $tn = 2; $n += 2; $noc += 2; } elseif(224 <= $t && $t <= 239) { $tn = 3; $n += 3; $noc += 2; } elseif(240 <= $t && $t <= 247) { $tn = 4; $n += 4; $noc += 2; } elseif(248 <= $t && $t <= 251) { $tn = 5; $n += 5; $noc += 2; } elseif($t == 252 || $t == 253) { $tn = 6; $n += 6; $noc += 2; } else { $n++; } if($noc >= $length) { break; } } if($noc > $length) { $n -= $tn; } $strcut = substr($string, 0, $n); $strcut = str_replace(array('∵', '&', '"', "'", '“', '”', '—', '<', '>', '·', '…'), array(' ', '&amp;', '&quot;', '&#039;', '&ldquo;', '&rdquo;', '&mdash;', '&lt;', '&gt;', '&middot;', '&hellip;'), $strcut); return $strcut.$dot; } function title_style($style, $html = 1) { $str = ''; if ($html) $str = ' style="'; $style_arr = explode(';',$style); if (!empty($style_arr[0])) $str .= 'color:'.$style_arr[0].';'; if (!empty($style_arr[1])) $str .= 'font-weight:'.$style_arr[1].';'; if ($html) $str .= '" '; return $str; } function id_encode($modules,$contentid) { return urlencode($modules.'-'.$contentid); } function safe_replace($string) { $string = str_replace('%20','',$string); $string = str_replace('%27','',$string); $string = str_replace('%2527','',$string); $string = str_replace('*','',$string); $string = str_replace('"','&quot;',$string); $string = str_replace("'",'',$string); $string = str_replace('"','',$string); $string = str_replace(';','',$string); $string = str_replace('<','&lt;',$string); $string = str_replace('>','&gt;',$string); $string = str_replace("{",'',$string); $string = str_replace('}','',$string); $string = str_replace('\\','',$string); return $string; } function go($catid, $id, $allurl = 0) { $category = getcache('category', 'commons'); $models = getcache('model', 'commons'); $id = (int) $id; $catid = (int) $catid; if(!$id || !isset($category[$catid])) return ''; $modelid = $category[$catid]['modelid']; if(!$modelid) return ''; $db = M($models[$modelid]['tablename']); $r = $db->getById($id, 'url'); if (!empty($allurl)) { if (strpos($r['url'], '://')===false) { if (strpos($category[$catid]['url'], '://') === FALSE) { $site = siteinfo($category[$catid]['siteid']); $r['url'] = substr($site['domain'], 0, -1).$r['url']; } else { $r['url'] = $category[$catid]['url'].$r['url']; } } } return $r['url']; } function dheader($string, $replace = true, $http_response_code = 0) { $islocation = substr(strtolower(trim($string)), 0, 8) == 'location'; $string = str_replace(array("\r", "\n"), array('', ''), $string); if(empty($http_response_code) || PHP_VERSION < '4.3' ) { @header($string, $replace); } else { @header($string, $replace, $http_response_code); } if($islocation) { exit(); } } function dhtml_entity_decode($string) { return html_entity_decode($string,ENT_QUOTES, 'utf-8'); } function dhtmlentities($string) { return htmlentities($string,ENT_QUOTES, 'utf-8'); } function catpos($catid, $symbol='', $type = '',$mod=''){ $symbol = $symbol ? $symbol : ' > '; $category_arr = array(); $cache_name = ($type) ? $type.'_category':'category'; $category_arr = getcache($cache_name, 'commons'); if(!isset($category_arr[$catid])) return ''; $pos = ''; $siteurl = ''; $arrparentid = array_filter(explode(',', $category_arr[$catid]['arrparentid'].','.$catid)); foreach($arrparentid as $catid) { if (strtolower($type) == 'product') { $rewrite = new \Common\Library\rewrite(); if ($mod != '') { $url = '/index.php?m=product&c=Index&a=lists&mod='.$mod.'&catid='.$catid; }else{ $url = $rewrite->category($catid); } } else { $url = U('Document/Index/lists', array('catid' => $catid)); } if(strpos($url, '://') === false) $url = $siteurl.$url; $pos .= '<a href="'.$url.'">'.$category_arr[$catid]['catname'].'</a>'.$symbol; } return $pos; } function catpos2($catid, $symbol='', $type = ''){ $symbol = $symbol ? $symbol : ' > '; $category_arr = array(); $cache_name = ($type) ? $type.'_category':'category'; $category_arr = getcache($cache_name, 'commons'); if(!isset($category_arr[$catid])) return ''; $pos = ''; $siteurl = ''; $arrparentid = array_filter(explode(',', $category_arr[$catid]['arrparentid'].','.$catid)); foreach($arrparentid as $catid) { if (strtolower($type) == 'product') { $rewrite = new \Common\Library\rewrite(); $url = U('Search/Index/index', array('catid' => $catid)); } else { $url = U('Search/Index/index', array('catid' => $catid)); } if(strpos($url, '://') === false) $url = $siteurl.$url; $pos .= '<a href="'.$url.'">'.$category_arr[$catid]['catname'].'</a>'.$symbol; } return $pos; } function subcat($parentid = NULL, $type = NULL,$self = '0') { $category = getcache('category', 'commons'); foreach($category as $id=>$cat) { $cat['url'] = U('Document/Index/lists', array('catid' => $cat['catid'])); if(($parentid === NULL || $cat['parentid'] == $parentid) && ($type === NULL || $cat['type'] == $type)) $subcat[$id] = $cat; if($self == 1 && $cat['catid'] == $parentid && !$cat['child']) $subcat[$id] = $cat; } return $subcat; } function runhook($hookid, $param) { if (empty($hookid)) return FALSE; return A('Common/Hook', 'Api')->run($hookid,$param); } function thumb($thumb, $width, $height) { return $thumb; } function helpers($file = '', $module = '') { if (empty($file)) return FALSE; $dir = COMMON_PATH.'Helpers/'; if (is_array($file)) { foreach ($file as $f) { require_cache($dir.$file.'.helper.php'); } } else { require_cache($dir.$file.'.helper.php'); } } function fileext($filename) { return strtolower(trim(substr(strrchr($filename, '.'), 1, 10))); } function file_icon($file,$type = 'png') { $ext_arr = array('doc','docx','ppt','xls','txt','pdf','mdb','jpg','gif','png','bmp','jpeg','rar','zip','swf','flv'); $ext = fileext($file); if($type == 'png') { if($ext == 'zip' || $ext == 'rar') $ext = 'rar'; elseif($ext == 'doc' || $ext == 'docx') $ext = 'doc'; elseif($ext == 'xls' || $ext == 'xlsx') $ext = 'xls'; elseif($ext == 'ppt' || $ext == 'pptx') $ext = 'ppt'; elseif ($ext == 'flv' || $ext == 'swf' || $ext == 'rm' || $ext == 'rmvb') $ext = 'flv'; else $ext = 'do'; } if(in_array($ext,$ext_arr)) return 'static/images/ext/'.$ext.'.'.$type; else return 'static/images/ext/blank.'.$type; } function sqlexecute($sqlquery = '') { if(empty($sqlquery)) return FALSE; $sqlquery = str_replace('prefix_', C('DB_PREFIX'), $sqlquery); $version = M()->query("select version() as v;"); $version = intval($version[0]['v']); if($version > '4.1' && C('DEFAULT_CHARSET')) { $sqlquery = preg_replace("/TYPE=(InnoDB|MyISAM|MEMORY)( DEFAULT CHARSET=[^; ]+)?/", "ENGINE=\\1 DEFAULT CHARSET=utf8;", $sqlquery); } $sqlquery = str_replace("\r", "\n", $sqlquery); $queriesarray = explode(";\n", trim($sqlquery)); foreach ($queriesarray as $query) { if (substr($query, 0, 1) != '#' && substr($query, 0, 1) != '-') { M()->execute($query); } } return TRUE; } function getDbVersion() { $version = M()->query("select version() as v;"); return intval($version[0]['v']); } function template($file, $module = '', $style = '') { $module = empty($module) ? strtolower(MODULE_NAME) : trim($module); $file = empty($file) ? strtolower(ACTION_NAME) : trim($file); $_default_style = DEFAULT_THEME; $_default_theme = DEFAULT_THEME; $_style = ($_default_style) ? $_default_style : $_default_theme; $style = (empty($style)) ? $_style : 'cloud'; $template = template_file($module, $file, $style); $tpl = new \Common\Library\template(); $tmplCacheFile = $tpl->loadTemplate($template); return $tmplCacheFile; } function template_file($module = '', $file = '', $style = 'default') { $dep = C('TMPL_FILE_DEPR'); $suffix = C('TMPL_TEMPLATE_SUFFIX'); $tmpdir = C('VIEW_PATH').$style; $tplfile = $tmpdir.$dep.$module.$dep.$file.$suffix; if ($style != 'default' && !file_exists ($tplfile)) { $tplfile = C('VIEW_PATH').'cloud'.$dep.$module.$dep.$file.$suffix; } $tplfile = (!file_exists($tplfile)) ? MODULE_PATH.'Templates/'.$file.$suffix : $tplfile; if (!file_exists ($tplfile)) { die($tplfile.' is not exists!'); } return $tplfile; } function content_pages($num, $curr_page, $pageurls) { $multipage = ''; $page = 11; $offset = 4; $pages = $num; $from = $curr_page - $offset; $to = $curr_page + $offset; $more = 0; if($page >= $pages) { $from = 2; $to = $pages-1; } else { if($from <= 1) { $to = $page-1; $from = 2; } elseif($to >= $pages) { $from = $pages-($page-2); $to = $pages-1; } $more = 1; } if($curr_page > 0) { $perpage = $curr_page == 1 ? 1 : $curr_page-1; $multipage .= '<a class="a1" href="'.$pageurls[$perpage][0].'">上一页</a>'; if($curr_page==1) { $multipage .= ' <span>1</span>'; } elseif($curr_page>6 && $more) { $multipage .= ' <a href="'.$pageurls[1][0].'">1</a>..'; } else { $multipage .= ' <a href="'.$pageurls[1][0].'">1</a>'; } } for($i = $from; $i <= $to; $i++) { if($i != $curr_page) { $multipage .= ' <a href="'.$pageurls[$i][0].'">'.$i.'</a>'; } else { $multipage .= ' <span>'.$i.'</span>'; } } if($curr_page<$pages) { if($curr_page<$pages-5 && $more) { $multipage .= ' ..<a href="'.$pageurls[$pages][0].'">'.$pages.'</a> <a class="a1" href="'.$pageurls[$curr_page+1][0].'">下一页</a>'; } else { $multipage .= ' <a href="'.$pageurls[$pages][0].'">'.$pages.'</a> <a class="a1" href="'.$pageurls[$curr_page+1][0].'">下一页</a>'; } } elseif($curr_page==$pages) { $multipage .= ' <span>'.$pages.'</span> <a class="a1" href="'.$pageurls[$curr_page][0].'">下一页</a>'; } return $multipage; } function seo($catid = '', $title = '', $description = '', $keyword = '', $type = '') { if (!empty($title)) $title = strip_tags($title); if (!empty($description)) $description = strip_tags($description); if (!empty($keyword)) $keyword = str_replace(' ', ',', strip_tags($keyword)); $cat = array(); if (!empty($catid)) { $cache_name = ($type) ? $type.'_category':'category'; $categorys = getcache($cache_name, 'commons'); $cat = $categorys[$catid]; $cat['setting'] = string2array($cat['setting']); } $site_title = C('SITE_TITLE'); $site_description = C('description'); $seo['site_title'] = !empty($site_title) ? $site_title : C('WEBNAME'); $seo['keyword'] = !empty($keyword) ? $keyword : C('keyword'); $seo['description'] = isset($description) && !empty($description) ? $description : (isset($cat['setting']['meta_description']) && !empty($cat['setting']['meta_description']) ? $cat['setting']['meta_description'] : (isset($site_description) && !empty($site_description) ? $site_description : '')); $seo['title'] = (isset($title) && !empty($title) ? $title.' - ' : '').(isset($cat['setting']['meta_title']) && !empty($cat['setting']['meta_title']) ? $cat['setting']['meta_title'].' - ' : (isset($cat['catname']) && !empty($cat['catname']) ? $cat['catname'].' - ' : '')); foreach ($seo as $k=>$v) { $seo[$k] = str_replace(array("\n","\r"), '', $v); } return $seo; } function module_exists($module = '') { if (empty($module)) return FALSE; $modules = getcache('module', 'commons'); $module = ucwords($module); if(in_array($module, array('Api', 'Common'))) return TRUE; return (is_array($modules) && isset($modules[$module])); } function showmessage($msg, $url_forward = 'goback', $ms = 1250, $dialog = '', $returnjs = '') { if(defined('IN_ADMIN')) { include parent::$admin->admin_tpl('showmessage', 'admin'); } else { include template('showmessage', 'common'); } exit; } function template_list($disable = 0) { $list = glob(TPL_PATH.DIRECTORY_SEPARATOR.'*', GLOB_ONLYDIR); $arr = $template = array(); foreach ($list as $key => $v) { $dirname = basename($v); if (file_exists($v.DIRECTORY_SEPARATOR.'config.php')) { $arr[$key] = include $v.DIRECTORY_SEPARATOR.'config.php'; if (!$disable && isset($arr[$key]['disable']) && $arr[$key]['disable'] == 1) { } } else { $arr[$key]['name'] = $dirname; } $arr[$key]['dirname']=$dirname; } return $arr; } function create_password($password ='', $encrypt = '') { return md5(md5($password.$encrypt)); } function api($name,$vars = array()){ $array = explode('/',$name); $method = array_pop($array); $classname = array_pop($array); $module = $array? array_pop($array) : 'Common'; $callback = $module.'\\Api\\'.$classname.'Api::'.$method; if(is_string($vars)) { $vars = explode(",", $vars); } return call_user_func_array($callback,$vars); } function check_in($id, $ids = '', $s = ',') { if(!$ids) return false; $ids = explode($s, $ids); return is_array($id) ? array_intersect($id, $ids) : in_array($id, $ids); } function remove_xss($string) { $string = preg_replace('/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S', '', $string); $parm1 = Array('javascript', 'vbscript', 'expression', 'applet', 'meta', 'xml', 'blink', 'link', 'script', 'embed', 'object', 'iframe', 'frame', 'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base'); $parm2 = Array('onabort', 'onactivate', 'onafterprint', 'onafterupdate', 'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate', 'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload', 'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick', 'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable', 'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin', 'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete', 'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove', 'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange', 'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit', 'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange', 'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload'); $parm = array_merge($parm1, $parm2); for ($i = 0; $i < sizeof($parm); $i++) { $pattern = '/'; for ($j = 0; $j < strlen($parm[$i]); $j++) { if ($j > 0) { $pattern .= '('; $pattern .= '(&#[x|X]0([9][a][b]);?)?'; $pattern .= '|(&#0([9][10][13]);?)?'; $pattern .= ')?'; } $pattern .= $parm[$i][$j]; } $pattern .= '/i'; $string = preg_replace($pattern, '', $string); } return $string; } function menu_linkage($linkageid = 0, $id = 'linkid', $defaultvalue = 0) { $linkageid = intval($linkageid); $datas = array(); $datas = getcache('linkage_'.$linkageid, 'linkage'); $infos = $datas['data']; if($datas['style']=='1') { $title = $datas['title']; $container = 'content'.random(3).date('is'); if(!defined('DIALOG_INIT_1')) { define('DIALOG_INIT_1', 1); $string .= '<script type="text/javascript" src="'.JS_PATH.'dialog.js"></script>'; $string .= '<link href="'.CSS_PATH.'dialog.css" rel="stylesheet" type="text/css" />'; } if(!defined('LINKAGE_INIT_1')) { define('LINKAGE_INIT_1', 1); $string .= '<script type="text/javascript" src="'.JS_PATH.'linkage/js/pop.js"></script>'; } $var_div = $defaultvalue && (ACTION_NAME=='edit' || ACTION_NAME=='account_manage_info' || ACTION_NAME=='info_publish' || ACTION_NAME=='orderinfo') ? menu_linkage_level($defaultvalue,$linkageid,$infos) : $datas['title']; $var_input = $defaultvalue && (ACTION_NAME=='edit' || ACTION_NAME=='account_manage_info' || ACTION_NAME=='info_publish') ? '<input type="hidden" name="info['.$id.']" value="'.$defaultvalue.'">' : '<input type="hidden" name="info['.$id.']" value="">'; $string .= '<div name="'.$id.'" value="" id="'.$id.'" class="ib">'.$var_div.'</div>'.$var_input.' <input type="button" name="btn_'.$id.'" class="button" value="'.L('linkage_select').'" onclick="open_linkage(\''.$id.'\',\''.$title.'\','.$container.',\''.$linkageid.'\')">'; $string .= '<script type="text/javascript">'; $string .= 'var returnid_'.$id.'= \''.$id.'\';'; $string .= 'var returnkeyid_'.$id.' = \''.$linkageid.'\';'; $string .= 'var '.$container.' = new Array('; foreach($infos AS $k=>$v) { if($v['parentid'] == 0) { $s[]='new Array(\''.$v['linkageid'].'\',\''.$v['name'].'\',\''.$v['parentid'].'\')'; } else { continue; } } $s = implode(',',$s); $string .=$s; $string .= ')'; $string .= '</script>'; } elseif($datas['style'] == '2') { $defVal = get_linkage($defaultvalue, $linkageid, ',', 4); if(!defined('LINKAGE_INIT_2')) { define('LINKAGE_INIT_2', 2); $string .= '<script type="text/javascript" src="'.JS_PATH.'linkage/js/linkagesel.min.js"></script>'; $string .= '<select id="linkage_'.$id.'"></select>'; $string .= '<input type="hidden" name="info['.$id.']" id="linkage_input_'.$id.'" value="'.$defaultvalue.'">'; $string .= '<script type="text/javascript">
    var '.$id.'_opts = {
            ajax: "'.__APP__.'?m=Api&c=Linkage&a=index&act=ajax_linkagesel&keyid='.$linkageid.'"
            ,selStyle: "margin-left: 3px;"
            ,select:  "#linkage_'.$id.'"
            ,loaderImg:"'.IMG_PATH.'msg_img/loading.gif"
            ,autoLink:false
            ,head:"请选择"
            ,onChange:"get_linkage_val()"
            ,defVal: ['.$defVal.']
    };
			var linkage_'.$id.' = new LinkageSel('.$id.'_opts);

			linkage_'.$id.'.onChange(function() {
				$("#linkage_input_'.$id.'").val(this.getSelectedValue());
			});			
			</script>'; } }elseif($datas['style']=='3') { if(!defined('LINKAGE_INIT_1')) { define('LINKAGE_INIT_1', 1); $string .= '<script type="text/javascript" src="'.JS_PATH.'linkage/js/jquery.ld.js"></script>'; } $default_txt = ''; if($defaultvalue) { $default_txt = menu_linkage_level($defaultvalue,$linkageid,$infos); $default_txt = '["'.str_replace(' > ','","',$default_txt).'"]'; } $string .= $defaultvalue && (ACTION_NAME=='edit' || ACTION_NAME=='account_manage_info' || ACTION_NAME=='info_publish') ? '<input type="hidden" name="info['.$id.']"  id="'.$id.'" value="'.$defaultvalue.'">' : '<input type="hidden" name="info['.$id.']"  id="'.$id.'" value="">'; for($i=1;$i<=$datas['setting']['level'];$i++) { $string .='<select class="pc-select-'.$id.'" name="'.$id.'-'.$i.'" id="'.$id.'-'.$i.'"><option value="">请选择菜单</option></select> '; } $string .= '<script type="text/javascript">
					$(function(){
						var $ld5 = $(".pc-select-'.$id.'");
						$ld5.ld({ajaxOptions : {"url" : "'.__APP__.'?m=Api&c=Linkage&a=index&act=ajax_select&keyid='.$linkageid.'"},defaultParentId : 0,style : {"width" : 120}})	 
						var ld5_api = $ld5.ld("api");
						ld5_api.selected('.$default_txt.');
						$ld5.bind("change",onchange);
						function onchange(e){
							var $target = $(e.target);
							var index = $ld5.index($target);
							$("#'.$id.'-'.$i.'").remove();
							$("#'.$id.'").val($ld5.eq(index).show().val());
							index ++;
							$ld5.eq(index).show();								}
					})
		</script>'; } else { $title = $defaultvalue ? $infos[$defaultvalue]['name'] : $datas['title']; $colObj = random(3).date('is'); $string = ''; if(!defined('LINKAGE_INIT')) { define('LINKAGE_INIT', 1); $string .= '<script type="text/javascript" src="'.JS_PATH.'linkage/js/mln.colselect.js"></script>'; if(defined('IN_ADMIN')) { $string .= '<link href="'.JS_PATH.'linkage/style/admin.css" rel="stylesheet" type="text/css">'; } else { $string .= '<link href="'.JS_PATH.'linkage/style/css.css" rel="stylesheet" type="text/css">'; } } $string .= '<input type="hidden" name="info['.$id.']" value="1"><div id="'.$id.'"></div>'; $string .= '<script type="text/javascript">'; $string .= 'var colObj'.$colObj.' = {"Items":['; foreach($infos AS $k=>$v) { $s .= '{"name":"'.$v['name'].'","topid":"'.$v['parentid'].'","colid":"'.$k.'","value":"'.$k.'","fun":function(){}},'; } $string .= substr($s, 0, -1); $string .= ']};'; $string .= '$("#'.$id.'").mlnColsel(colObj'.$colObj.',{'; $string .= 'title:"'.$title.'",'; $string .= 'value:"'.$defaultvalue.'",'; $string .= 'width:100'; $string .= '});'; $string .= '</script>'; } return $string; } function menu_linkage_level($linkageid,$keyid,$infos,$result=array()) { if(array_key_exists($linkageid,$infos)) { $result[]=$infos[$linkageid]['name']; return menu_linkage_level($infos[$linkageid]['parentid'],$keyid,$infos,$result); } krsort($result); return implode(' > ',$result); } function menu_level($menuid, $cache_file, $cache_path = 'commons', $key = 'catname', $parentkey = 'parentid', $linkstring = ' > ', $result=array()) { $menu_arr = getcache($cache_file, $cache_path); if (array_key_exists($menuid, $menu_arr)) { $result[] = $menu_arr[$menuid][$key]; return menu_level($menu_arr[$menuid][$parentkey], $cache_file, $cache_path, $key, $parentkey, $linkstring, $result); } krsort($result); return implode($linkstring, $result); } function get_linkage($linkageid, $keyid, $space = '>', $type = 1, $result = array(), $infos = array()) { if($space=='' || !isset($space))$space = '>'; if(!$infos) { $datas = getcache('linkage_'.$keyid, 'linkage'); $infos = $datas['data']; } if($type == 1 || $type == 3 || $type == 4) { if(array_key_exists($linkageid,$infos)) { $result[]= ($type == 1) ? $infos[$linkageid]['name'] : (($type == 4) ? $linkageid :$infos[$linkageid]); return get_linkage($infos[$linkageid]['parentid'], $keyid, $space, $type, $result, $infos); } else { if(count($result)>0) { krsort($result); if($type == 1 || $type == 4) $result = implode($space,$result); return $result; } else { return $result; } } } else { return $infos[$linkageid]['name']; } } function mb_unserialize($serial_str) { $serial_str = str_replace ( "\r", "", $serial_str ); $serial_str = preg_replace ( '!s:(\d+):"(.*?)";!se', "'s:'.strlen('$2').':\"$2\";'", $serial_str ); return unserialize ( $serial_str ); } function get_document_info($modelid, $id, $modelinfo = TRUE) { $models = getcache('model', 'commons'); $model = $models[$modelid]; $tablename = $model['tablename']; $info = M($tablename)->where(array('id' => $id))->find(); if ($modelinfo == TRUE) { $modelinfo = M($tablename.'_data')->where(array('id' => $id))->find(); $info = array_merge($info, $modelinfo); } require_once CACHE_MODEL_PATH.'content_output.class.php'; $model_output = new \content_output($modelid, $info['catid']); $result = $model_output->get($info); return $result; } function getavatar($uid = 0,$modelid = 1, $type = 'url') { $suid = sprintf("%09d", $uid); $dir1 = substr($suid, 0, 3); $dir2 = substr($suid, 3, 2); $dir3 = substr($suid, 5, 2); $rootDir = SITE_PATH.'/uploadfile/avatar/'; $userDir = $dir1.'/'.$dir2.'/'.$dir3.'/'; if($modelid == 1){ $fileDir = $rootDir.$userDir.$uid.'_avatar.jpg'; }else{ $fileDir = model('member_merchant')->getFieldByUserid($uid,'store_logo'); $fileDir = SITE_PATH.$fileDir; } if (!file_exists($fileDir)) { $result = ($modelid == 1) ? $rootDir.'avatar.jpg' : $rootDir.'seller_logo.jpg'; } else { $result = $fileDir; } return ($type == 'url') ? str_replace(SITE_PATH, __ROOT__, $result) : $result; } function getUserInfo($uid, $field = NULL) { $userinfo = D('Member')->getByUserid($uid); if (!$userinfo) { return FALSE; } $userinfo['avatar'] = getavatar($uid); if ($field === NULL) { return $userinfo; } else { return $userinfo[$field]; } } function get_encode($str) { return $str ? cutstr($str, 3, '***').substr($str, -1) : ''; } function cutstr($string, $length, $dot = ' ...') { if(strlen($string) <= $length) { return $string; } $pre = chr(1); $end = chr(1); $string = str_replace(array('&amp;', '&quot;', '&lt;', '&gt;'), array($pre.'&'.$end, $pre.'"'.$end, $pre.'<'.$end, $pre.'>'.$end), $string); $strcut = ''; if(strtolower(CHARSET) == 'utf-8') { $n = $tn = $noc = 0; while($n < strlen($string)) { $t = ord($string[$n]); if($t == 9 || $t == 10 || (32 <= $t && $t <= 126)) { $tn = 1; $n++; $noc++; } elseif(194 <= $t && $t <= 223) { $tn = 2; $n += 2; $noc += 2; } elseif(224 <= $t && $t <= 239) { $tn = 3; $n += 3; $noc += 2; } elseif(240 <= $t && $t <= 247) { $tn = 4; $n += 4; $noc += 2; } elseif(248 <= $t && $t <= 251) { $tn = 5; $n += 5; $noc += 2; } elseif($t == 252 || $t == 253) { $tn = 6; $n += 6; $noc += 2; } else { $n++; } if($noc >= $length) { break; } } if($noc > $length) { $n -= $tn; } $strcut = substr($string, 0, $n); } else { for($i = 0; $i < $length; $i++) { $strcut .= ord($string[$i]) > 127 ? $string[$i].$string[++$i] : $string[$i]; } } $strcut = str_replace(array($pre.'&'.$end, $pre.'"'.$end, $pre.'<'.$end, $pre.'>'.$end), array('&amp;', '&quot;', '&lt;', '&gt;'), $strcut); $pos = strrpos($strcut, chr(1)); if($pos !== false) { $strcut = substr($strcut,0,$pos); } return $strcut.$dot; } function is_login() { $userid = (int) cookie('_userid'); if ($userid < 1) { return FALSE; } return getUserInfo($userid); } function checkVerify($string, $reset = TRUE) { if (!empty($string) && $string == strtolower(session('verify'))) { if($reset === TRUE) session('verify', NULL); return TRUE; } else { return FALSE; } } function dmkdir($dir, $mode = 0777, $makeindex = TRUE){ if(!is_dir($dir)) { dmkdir(dirname($dir), $mode, $makeindex); @mkdir($dir, $mode); if(!empty($makeindex)) { @touch($dir.'/index.html'); @chmod($dir.'/index.html', 0777); } } return true; } function sizecount($filesize) { if ($filesize >= 1073741824) { $filesize = round($filesize / 1073741824 * 100) / 100 .' GB'; } elseif ($filesize >= 1048576) { $filesize = round($filesize / 1048576 * 100) / 100 .' MB'; } elseif($filesize >= 1024) { $filesize = round($filesize / 1024 * 100) / 100 . ' KB'; } else { $filesize = $filesize.' Bytes'; } return $filesize; } function sql_split($sql, $tablepre) { if ($tablepre != "prefix_") $sql = str_replace("prefix_", $tablepre, $sql); $sql = preg_replace("/TYPE=(InnoDB|MyISAM|MEMORY)( DEFAULT CHARSET=[^; ]+)?/", "ENGINE=\\1 DEFAULT CHARSET=utf8", $sql); $sql = str_replace("\r", "\n", $sql); $ret = array(); $num = 0; $queriesarray = explode(";\n", trim($sql)); unset($sql); foreach ($queriesarray as $query) { $ret[$num] = ''; $queries = explode("\n", trim($query)); $queries = array_filter($queries); foreach ($queries as $query) { $str1 = substr($query, 0, 1); if ($str1 != '#' && $str1 != '-') $ret[$num] .= $query; } $num++; } return $ret; } function show_ad($siteid, $id) { $siteid = intval($siteid); $id = intval($id); if(!$id || !$siteid) return false; $p = D('Poster'); $r = $p->where(array('spaceid'=>$id, 'siteid'=>$siteid))->field( 'disabled, setting')->order('id ASC')->find(); if ($r['setting']) { $c = string2array($r['setting']); } else { $r['code'] = ''; } return $c['code']; } function file_down($filepath, $filename = '') { if(!$filename) $filename = basename($filepath); if(is_ie()) $filename = rawurlencode($filename); $filetype = fileext($filename); $filesize = sprintf("%u", filesize($filepath)); if(ob_get_length() !== false) @ob_end_clean(); header('Pragma: public'); header('Last-Modified: '.gmdate('D, d M Y H:i:s') . ' GMT'); header('Cache-Control: no-store, no-cache, must-revalidate'); header('Cache-Control: pre-check=0, post-check=0, max-age=0'); header('Content-Transfer-Encoding: binary'); header('Content-Encoding: none'); header('Content-type: '.$filetype); header('Content-Disposition: attachment; filename="'.$filename.'"'); header('Content-length: '.$filesize); readfile($filepath); exit; } function order_count($userid, $modelid,$status=-2,$mod='',$goods_id = 0){ $userid = (int) $userid; $status = (int) $status; if($userid < 1) return FALSE; if($modelid < 1) return FALSE; $sqlmap = array(); ($modelid == 1) ? $sqlmap['buyer_id'] = $userid : $sqlmap['seller_id'] = $userid; if (!empty($mod)) { $sqlmap['act_mod'] = $mod; } if ($goods_id > 0) $sqlmap['goods_id'] = $goods_id; if($status > -2) { $sqlmap['status'] = $status; } return (int) model('order')->where($sqlmap)->count(); } function appeal_count($userid, $modelid,$status=-1){ $userid = (int) $userid; if ($userid && $modelid) { $sqlmap = array(); ($modelid == 1) ? $sqlmap['buyer_id'] = $userid : $sqlmap['seller_id'] = $userid; } $status = (int) $status; if($status > -1) { $sqlmap['appeal_status'] = $status; } return (int) model('appeal')->where($sqlmap)->count(); } function product_log($p_id,$p_state,$is_sys,$uid,$msg){ $model = M('product_log'); $sqlMap = array(); $sqlMap['p_id'] = $p_id; $sqlMap['p_state'] = $p_state; $sqlMap['is_sys'] = $is_sys; $sqlMap['uid'] = $uid; $sqlMap['msg'] = $msg; $sqlMap['dateline'] = NOW_TIME; $sqlMap['clientip'] = get_client_ip(); $result = $model->add($sqlMap); return $result; } function commission_log($p_id,$p_state,$is_sys,$uid,$msg){ $sqlMap = array(); $sqlMap['p_id'] = $p_id; $sqlMap['p_state'] = $p_state; $sqlMap['is_sys'] = $is_sys; $sqlMap['uid'] = $uid; $sqlMap['msg'] = $msg; $sqlMap['dateline'] = NOW_TIME; $sqlMap['clientip'] = get_client_ip(); $result = model('commission_log')->add($sqlMap); return $result; } function task_log($t_id,$t_state,$is_sys,$uid,$msg){ $model = M('task_log'); $sqlMap = array(); $sqlMap['t_id'] = $t_id; $sqlMap['t_status'] = $t_state; $sqlMap['is_sys'] = $is_sys; $sqlMap['userid'] = $uid; $sqlMap['msg'] = $msg; $sqlMap['dateline'] = NOW_TIME; $sqlMap['clientip'] = get_client_ip(); $result = $model->add($sqlMap); return $result; } function is_sign($uid) { $db = M('MemberSign'); $sqlmap = array(); $sqlmap['uid'] = $uid; $sqlmap['_string'] = "DATE_FORMAT(FROM_UNIXTIME(dateline),'%Y%m%d') = DATE_FORMAT(NOW(),'%Y%m%d')"; return ($db->where($sqlmap)->count()) ? TRUE : FALSE; } function getGoodsInfo($id = '0') { if ($id < 1) return json_encode(array('info'=>'参数错误')); $rs = D('product')->where(array('id'=>$id))->find(); $rs1 = D('product_'.$rs['mod'])->where(array('id'=>$id))->find(); if (!$rs || !$rs1) return json_encode(array('info'=>'您查看的记录不存在')); return array_merge($rs, $rs1); } function action_finance_log($uid = 0, $num = 0, $type = 'money', $cause = '',$only='',$extra = array(),$isrun = TRUE) { $uid = (int) $uid; if($uid < 1 || !in_array($type, array('deposit','money','point','exp'))) return FALSE; $log = $extra; $log['userid'] = $uid; $log['num'] = $num; $log['type'] = $type; $log['cause'] = $cause; $log['dateline'] = NOW_TIME; $log['ip'] = get_client_ip(); $log['only'] = $only; $r = model('member_finance_log')->add($log); if(!$r) return FALSE; if ($isrun === TRUE) return model('member')->where(array('userid' => $uid))->setInc($type, $num); return TRUE; } function tree_to_list($tree, $child = '_child', $order = 'id', &$list = array()) { if (is_array($tree)) { $refer = array(); foreach ($tree as $key => $value) { $reffer = $value; if (isset($reffer[$child])) { unset($reffer[$child]); tree_to_list($value[$child], $child, $order, $list); } $list[] = $reffer; } $list = list_sort_by($list, $order, $sortby = 'asc'); } return $list; } function list_to_tree($list, $pk = 'id', $pid = 'pid', $child = '_child', $root = 0) { $tree = array(); if (is_array($list)) { $refer = array(); foreach ($list as $key => $data) { $refer[$data[$pk]] = & $list[$key]; } foreach ($list as $key => $data) { $parentId = $data[$pid]; if ($root == $parentId) { $tree[$data[$pk]] = & $list[$key]; } else { if (isset($refer[$parentId])) { $parent = & $refer[$parentId]; $parent[$child][$data[$pk]] = & $list[$key]; } } } } return $tree; } function member_group_name($userid){ $userinfo = model('member')->getByUserid($userid); $groups = ($userinfo['modelid'] == 1) ? getcache('member_group','member') : getcache('merchant_group','member'); return $groups[$userinfo['groupid']]['name']; } function nickname($userid,$type = ''){ $userinfo = model('member')->where(array('userid' => $userid))->find(); if (!$userinfo['nickname']) { if($type){ $userinfo['nickname'] = 'ID:'.$userid; }else{ $userinfo['nickname'] = '新会员，请完善资料'; } } return $userinfo['nickname']; } function id_in_arrchildid($catid, $id) { $categorys = getcache('category', 'commons'); $category = $categorys[$catid]; $arrchildid = $category['arrchildid']; return check_in($id, $arrchildid); } function is_gb2312($str){ for($i=0; $i<strlen($str); $i++) { $v = ord( $str[$i] ); if( $v > 127) { if( ($v >= 228) && ($v <= 233) ) { if( ($i+2) >= (strlen($str) - 1)) return true; $v1 = ord( $str[$i+1] ); $v2 = ord( $str[$i+2] ); if( ($v1 >= 128) && ($v1 <=191) && ($v2 >=128) && ($v2 <= 191) ) return false; else return true; } } } return true; } function total_count($userid){ $where['seller_id'] = $userid; $result['appeal_count'] = model('appeal')->where($where)->count(); $sqlMap['status'] = 1; $sqlMap['userid'] = $userid; $result['activity_count'] = D('Product/Product')->where($sqlMap)->count(); $result['checke_activity'] = D('Product/Product')->where(array('status'=>array('in','-3,-2'),'userid'=>$userid))->count(); return $result; } function activitiy_price_name($mod){ $activity = model('activity_set')->where(array('activity_type'=>$mod))->getField('key,value'); if($mod == 'rebate'){ return $activity['rebate_price_name']; }else if ($mod == 'trial'){ return $activity['trial_price_name']; }else{ return $activity['postal_price_name']; } } function price($id){ $factory = new \Product\Factory\product($id); $mod = $factory->product_info['mod']; if($mod == 'rebate'){ $price = sprintf('%.2f' , $factory->product_info['goods_price'] * $factory->product_info['goods_discount'] / 10); }else{ $price = sprintf('%.2f' , $factory->product_info['goods_price']); } return $price; } function message_count($userid = 0) { $userid = (int) $userid; if($userid < 1) return 0; $sqlmap = array(); $sqlmap['send_to_id'] = $userid; $sqlmap['status'] = 0; $message_count = model('message')->where($sqlmap)->count(); $message_group_count = 0; $group_map = array(); $group_map['status'] = 0; $message_group = model('message_group')->where($group_map)->select(); if($message_group) { foreach ($message_group as $key => $value) { if(model('message_data')->where(array('group_message_id' => $value['id']))->count() == 0) { $message_group_count++; } } } return (int) ($message_count + $message_group_count); } function get_shop_set($id = 0, $field = NULL) { $info = model('shop_set')->getById($id); if($field) return $info[$field]; return $info; } function C_READ($name = '', $mod = 'trial') { return model('activity_set')->where(array('key'=>$name,'activity_type'=>$mod))->getField('value'); } function member_info($userid){ if ((int) $userid < 1) return FALSE; $rs1 = model('member')->where(array('userid'=>$userid))->find(); if (!$rs1) return FALSE; $modelid = $rs1['modelid']; $models = getcache('model','commons'); $tablename = $models[$modelid]['tablename']; $rs2 = model($tablename)->where(array('userid'=>$userid))->find(); if(empty($rs1) ){ $data = $rs2; }else if(empty($rs2)){ $data = $rs1; }else{ $data = array_merge($rs1,$rs2); } if($modelid == 2){ $groupid = model('member')->where(array('userid'=>$userid))->getField("groupid"); $seller_type = member_group_name($userid); $shop = model('member_attesta')->where(array('userid'=>$userid,'type'=>'shop','status'=>1))->count(); $brand = model('member_attesta')->where(array('userid'=>$userid,'type'=>'brand','status'=>1))->find(); $data['groupid'] = $groupid; $data['seller_type'] = $seller_type; $data['shop_attesta'] = $shop; $data['brand_attesta'] = ($brand) ? 1: 0; $brandinfo = array2string($brand['infos']); $data['brand_name'] = $brandinfo['chinese']; }else{ $birthday = string2array($data['birthday']); $data['birth'] = $birthday; $data['birthday'] = $birthday['year'].'-'.$birthday['month'].'-'.$birthday['day']; $address = string2array($data['receives']); $data['contact_address'] = $address['r_address']; $data['contact_name'] = $address['r_name']; $data['contact_tel'] = $address['r_phone']; $data['avatar'] = getavatar($userid); $data['agent_count'] = model('member')->where(array('agent_id'=>$userid))->count(); } $idetifyinfos = model('member_attesta')->where(array('userid'=>$userid))->select(); foreach ($idetifyinfos as $k=>$v){ $idetify = string2array($v['infos']); if($v['type'] == 'identity'){ $data['id_number'] = $idetify['id_number']; $data['name'] = $idetify['name']; $status = model('member_attesta')->where(array('userid'=>$userid,'type'=>'identity'))->find(); $data['id_number_status'] = $status['status']; }elseif ($v['type'] == 'bank'){ $data['bank_account'] = $idetify['account']; $data['bank_name'] = $idetify['bank_name']; $data['province'] = $idetify['province']; $data['city'] = $idetify['city']; $data['area'] = $idetify['area']; $data['sub_branch'] = $idetify['sub_branch']; $province = model('linkage')->getFieldByLinkageid($idetify['province'],'name'); $city = model('linkage')->getFieldByLinkageid($idetify['city'],'name'); $data['band_address'] = $province.$city.$idetify['sub_branch']; }else if ($v['type'] == 'alipay'){ $data['alipay_account'] = $idetify['alipay_account']; $data['alipay_code'] = $idetify['alipay_code']; $data['a_username'] = $idetify['username']; } } return $data; } function activity_count($userid,$mod='',$status = -4){ if($userid < 1) return false; $sqlmap = array(); $sqlmap['company_id'] = $userid; if(!empty($mod)){ $sqlmap['mod'] = $mod; } if($status > -4){ $sqlmap['status'] = $status; } return model('product')->where($sqlmap)->count(); } function url_rewrite($rule = '', $param = array(), $domain = '') { $urlrules = C('URL_REWRITE'); $urlrulek = parse_name($rule['m']).'/'.parse_name($rule['c']).'/'.$rule['a']; if(!$urlrules[$urlrulek]) return FALSE; return (($domain) ? ((is_ssl()?'https://':'http://')).$domain : '').$urlrules[$urlrulek].(($param) ? '?'.http_build_query($param) : ''); } function shop_set($id,$field = ''){ if ($field!=''){ $result = model('shop_set')->where(array('id'=>$id))->getfield($field); }else{ $result = model('shop_set')->find($id); } return $result; } function is_activity_open($mod){ $info = model('activity_set')->where(array('activity_type'=>$mod))->getField('key,value'); return $info[$mod.'_isopen']; } function report_count_by_gid($goods_id) { $sqlmap = array(); $sqlmap['goods_id'] = $goods_id; $sqlmap['status'] = 1; return model('trial_report')->where($sqlmap)->count(); } function buyer_count_by_gid($goods_id = 0) { $sqlmap = array(); $sqlmap['goods_id'] = $goods_id; $sqlmap['status'] = array("GT", 1); return model('order')->where($sqlmap)->count(); } function report_buyer_by_gid($goods_id = 0) { $sqlmap = array(); $sqlmap['goods_id'] = $goods_id; $sqlmap['status'] = 1; return model('report')->where($sqlmap)->count(); } function get_trial_by_gid($goods_id = 0) { $sqlmap = array(); $sqlmap['goods_id'] = $goods_id; return model('order')->where($sqlmap)->count(); } function get_trial_pass_by_gid($goods_id = 0){ $sqlmap = array(); $sqlmap['goods_id'] = $goods_id; $sqlmap['status'] = 2; return model('order')->where($sqlmap)->count(); } function get_over_trial_by_gid($goods_id = 0) { $sqlmap = array(); $sqlmap['goods_id'] = $goods_id; $sqlmap['status'] = 7; return model('order')->where($sqlmap)->count(); } function goods_info_count($status = 0){ $sqlMap = array(); $sqlMap['status'] = $status; return model('product')->where($sqlMap)->count(); } function order_info_count($status = 0,$istoday = false){ $sqlMap = array(); if($istoday != false){ $beginToday=mktime(0,0,0,date('m'),date('d'),date('Y')); $endToday=mktime(0,0,0,date('m'),date('d')+1,date('Y'))-1; $sqlMap['inputtime'] = array('between',array($beginToday,$endToday)); $count = model('order')->where($sqlMap)->count(); }else{ $sqlMap['status'] = $status; $count = model('order')->where($sqlMap)->count(); } return $count; } function member_info_count($modelid){ $beginToday=mktime(0,0,0,date('m'),date('d'),date('Y')); $endToday=mktime(0,0,0,date('m'),date('d')+1,date('Y'))-1; $sqlMap = array(); $sqlMap['regdate'] = array('between',array($beginToday,$endToday)); $sqlMap['modelid'] = $modelid; $count = model('member')->where($sqlMap)->count(); return $count; } function deposite_count($type = 1,$status = 0){ $beginToday=mktime(0,0,0,date('m'),date('d'),date('Y')); $endToday=mktime(0,0,0,date('m'),date('d')+1,date('Y'))-1; if($type == 1){ $sqlMap['dateline'] = array('between',array($beginToday,$endToday)); $sqlMap['status'] =$status; $count = model('pay_order')->where($sqlMap)->sum('fee'); }elseif($type == 2){ unset($sqlMap); $sqlMap['status'] =0; $count = model('pay_check')->where($sqlMap)->sum('money'); }elseif($type == 3 ){ unset($sqlMap); $sqlMap['status'] =0; $count = model('cash_records')->where($sqlMap)->sum('totalmoney'); }elseif($type == 4){ $sqlMap['inputtime'] = array('between',array($beginToday,$endToday)); $sqlMap['status'] = $status; $count = model('cash_records')->where($sqlMap)->sum('totalmoney'); } return ($count == '') ? 0 : $count; } function brand_count($type='identity',$status='0'){ return model('member_attesta')->where(array('type' => $type,'status'=>0))->count(); } function store_name($userid) { $userid = (int)$userid; if ($userid < 0) return FALSE; return model('member_merchant')->getFieldByUserid($userid,'store_name'); } function get_personal($userid,$type){ $r = model('member_attesta')->where(array('userid'=>$userid,'type'=>$type,'status'=>1))->find(); $real = string2array($r['infos']); return $real; } function get_seo($type ='',$field ='',$title=''){ $setting = model('Setting')->getField('key,value'); $arr = array('{site_title}' => C('webname')); $arrs = array('{title}' => $title); if (isset($setting['score_seo'])) { $setting['score_seo'] = string2array($setting['score_seo']); } if (isset($setting['activity_seo'])) { $setting['activity_seo'] = string2array($setting['activity_seo']); } if (isset($setting['help_seo'])) { $setting['help_seo'] = string2array($setting['help_seo']); } if (isset($setting['rebate_seo'])) { $setting['rebate_seo'] = string2array($setting['rebate_seo']); } if (isset($setting['trial_seo'])) { $setting['trial_seo'] = string2array($setting['trial_seo']); } if (isset($setting['all_seo'])) { $setting['all_seo'] = string2array($setting['all_seo']); } if (isset($setting['red_seo'])) { $setting['red_seo'] = string2array($setting['red_seo']); } if (isset($setting['postal_seo'])) { $setting['postal_seo'] = string2array($setting['postal_seo']); } if (isset($setting['shai_seo'])) { $setting['shai_seo'] = string2array($setting['shai_seo']); } if (isset($setting['report_seo'])) { $setting['report_seo'] = string2array($setting['report_seo']); } if (isset($setting['rebate_show'])) { $setting['rebate_show'] = string2array($setting['rebate_show']); } if (isset($setting['trial_show'])) { $setting['trial_show'] = string2array($setting['trial_show']); } if (isset($setting['postal_show'])) { $setting['postal_show'] = string2array($setting['postal_show']); } if (!empty($title)) { $setting[$type][$field] = str_replace(array_keys($arrs), $arrs, $setting[$type][$field]); } if (!empty($field)) { $setting[$type][$field] = str_replace(array_keys($arr), $arr, $setting[$type][$field]); return $setting[$type][$field]; }else{ $setting[$type] = str_replace(array_keys($arr), $arr, $setting[$type]); return $setting[$type]; } } function get_bind_taobao($userid = '') { $userid = (int)$userid; if ($userid < 1) return FALSE; return model('member_bind')->where(array('userid'=>$userid,'status'=>array('NEQ',2)))->order('id DESC')->select(); } function img2thumb($url='',$size='b',$is_has = 0) { $arr = array('b'=>'','m'=>'_300','s'=>'_150'); if (!$url) return FALSE; $list = explode('.', $url); if($is_has == 1){ $arrs = explode('_', $list[0]); $new_url = $arrs[0].$arr[$size].'.'.$list[1]; }else{ $new_url = $list[0].$arr[$size].'.'.$list[1]; } if (!file_exists('.'.$new_url)) { $new_url = $url; } return $new_url; } function get_thumb($filename,$thumb_img = 'test.jpg',$width='150',$height='150'){ $img=imagecreatefromjpeg($filename); $img_width=imagesx($img); $img_height=imagesy($img); $new_img_width=$width; $new_img_height=$height; $new_img=imagecreatetruecolor($new_img_width,$new_img_height); imagecopyresized($new_img,$img,0,0,0,0,$new_img_width,$new_img_height,$img_width,$img_height); imagejpeg($new_img,$thumb_img); imagedestroy($new_img); return $thumb_img; } function get_reword($userid,$type){ if($userid < 1) return FALSE; $sqlMap = array(); $sqlMap['userid'] = $userid; $sqlMap['recommend_status'] = array('EQ','1'); $sqlMap['type'] = array('EQ',$type); return model('member_finance_log')->where($sqlMap)->sum('num'); } function invite_among($type){ $friend_list = model('member_finance_log')->group('userid')->field('sum(num) AS num,userid')->where(array('type'=>$type,'recommend_status'=>1))->order('num DESC')->limit(10)->select(); foreach ($friend_list as $_k=>$_v){ $friend_list[$_k]['nickname'] = nickname($_v['userid']); $friend_list[$_k]['avatar'] = getavatar($_v['userid']); } return $friend_list; } function go_taobao($url){ preg_match('/id=([^<>&]*)/', $url, $id); $id = $id[1]; include "Application/taobao/TopSdk.php"; $c = new TopClient; $c->appkey = C('API_KEY'); $c->secretKey = C('API_SECRET'); $req = new TbkItemsDetailGetRequest; $req->setTrackIids("value1,value2,value3"); $req->setFields("num_iid,seller_id,nick,title,price,volume,pic_url,item_url,shop_url"); $req->setNumIids("$id"); $resp = $c->execute($req); $result['status'] = 1; $result['url'] = (string)$resp->tbk_items->tbk_item->item_url; $result['img'] = (string)$resp->tbk_items->tbk_item->pic_url; $result['title'] =(string)$resp->tbk_items->tbk_item->title; $result['keyword'] = $keywords[1]; $result['goods_price'] =(string)$resp->tbk_items->tbk_item->discount_price; $result['description'] = $description; $result['wangwang'] = (string)$resp->tbk_items->tbk_item->nick; return $result; } function go_tmall($url){ preg_match('/id=([^<>&]*)/', $url, $id); $id = $id[1]; include "Application/taobao/TopSdk.php"; $c = new TopClient; $c->appkey = C('API_KEY'); $c->secretKey = C('API_SECRET'); $req = new TbkItemsDetailGetRequest; $req->setTrackIids("value1,value2,value3"); $req->setFields("num_iid,seller_id,nick,title,price,volume,pic_url,item_url,shop_url"); $req->setNumIids("$id"); $resp = $c->execute($req); $result['status'] = 1; $result['url'] = (string)$resp->tbk_items->tbk_item->item_url; $result['img'] = (string)$resp->tbk_items->tbk_item->pic_url; $result['title'] =(string)$resp->tbk_items->tbk_item->title; $result['keyword'] = $keywords[1]; $result['goods_price'] =(string)$resp->tbk_items->tbk_item->discount_price; $result['description'] = $description; $result['wangwang'] = (string)$resp->tbk_items->tbk_item->nick; return $result; } function my_image_resize($src_file, $dst_file , $new_width , $new_height) { if($new_width <1 || $new_height <1) { echo "params width or height error !"; exit(); } if(!file_exists($src_file)) { echo $src_file . " is not exists !"; exit(); } $type=exif_imagetype($src_file); $support_type=array(IMAGETYPE_JPEG , IMAGETYPE_PNG , IMAGETYPE_GIF); if(!in_array($type, $support_type,true)) { echo "this type of image does not support! only support jpg , gif or png"; exit(); } switch($type) { case IMAGETYPE_JPEG : $src_img=imagecreatefromjpeg($src_file); break; case IMAGETYPE_PNG : $src_img=imagecreatefrompng($src_file); break; case IMAGETYPE_GIF : $src_img=imagecreatefromgif($src_file); break; default: echo "Load image error!"; exit(); } $w=imagesx($src_img); $h=imagesy($src_img); $ratio_w=1.0 * $new_width / $w; $ratio_h=1.0 * $new_height / $h; $ratio=1.0; if( ($ratio_w < 1 && $ratio_h < 1) || ($ratio_w > 1 && $ratio_h > 1)) { if($ratio_w < $ratio_h) { $ratio = $ratio_h ; }else { $ratio = $ratio_w ; } $inter_w=(int)($new_width / $ratio); $inter_h=(int) ($new_height / $ratio); $inter_img=imagecreatetruecolor($inter_w , $inter_h); imagecopy($inter_img, $src_img, 0,0,0,0,$inter_w,$inter_h); $new_img=imagecreatetruecolor($new_width,$new_height); imagecopyresampled($new_img,$inter_img,0,0,0,0,$new_width,$new_height,$inter_w,$inter_h); switch($type) { case IMAGETYPE_JPEG : imagejpeg($new_img, $dst_file,100); break; case IMAGETYPE_PNG : imagepng($new_img,$dst_file,100); break; case IMAGETYPE_GIF : imagegif($new_img,$dst_file,100); break; default: break; } } else{ $ratio=$ratio_h>$ratio_w? $ratio_h : $ratio_w; $inter_w=(int)($w * $ratio); $inter_h=(int) ($h * $ratio); $inter_img=imagecreatetruecolor($inter_w , $inter_h); imagecopyresampled($inter_img,$src_img,0,0,0,0,$inter_w,$inter_h,$w,$h); $new_img=imagecreatetruecolor($new_width,$new_height); imagecopy($new_img, $inter_img, 0,0,0,0,$new_width,$new_height); switch($type) { case IMAGETYPE_JPEG : imagejpeg($new_img, $dst_file,100); break; case IMAGETYPE_PNG : imagepng($new_img,$dst_file,100); break; case IMAGETYPE_GIF : imagegif($new_img,$dst_file,100); break; default: break; } }} function go_jd($url){ $text = file_get_contents("$url"); $result = array(); if(empty($text)){ $result['status'] = 0; $result['info'] = '地址没有值'; return $result; } $text = iconv('GBK','UTF-8',$text); $shopurl = $url; preg_match('/<img[^>]*data-img="1"[^r]*rc=\"([^"]*)\"[^>]*>/', $text, $img); preg_match('/<title>([^<>]*)<\/title>/', $text, $title); preg_match('/<meta name="keywords" .*?content="(.*?)".*? \/>/is', $text, $keywords); preg_match('/class="p-price">￥([^<>]*)<\/strong>/', $text, $price); preg_match('/<a class="slogo-shopname"[^>]*>([^<>]*)<\/a>/', $text, $wangwang); $wangwang[1]=preg_replace("/\s+/",' ',$wangwang[1]); $result['status'] = 1; $result['url'] = $shopurl; $result['img'] = $img[1]; $result['title'] = $title[1]; $result['title'] = str_replace("-京东","",$result['title']); $result['keyword'] = $keywords[1]; $result['goods_price'] = $price[1]; $result['wangwang'] = $wangwang[1]; return $result; }}namespace Think{ class Think { private static $_map = array(); private static $_instance = array(); static public function start() { spl_autoload_register('Think\Think::autoload'); register_shutdown_function('Think\Think::fatalError'); set_error_handler('Think\Think::appError'); set_exception_handler('Think\Think::appException'); Storage::connect(STORAGE_TYPE); if(APP_STATUS && is_file(CONF_PATH.APP_STATUS.CONF_EXT)) C(include CONF_PATH.APP_STATUS.CONF_EXT); date_default_timezone_set(C('DEFAULT_TIMEZONE')); if(C('CHECK_APP_DIR')) { $module = defined('BIND_MODULE') ? BIND_MODULE : C('DEFAULT_MODULE'); if(!is_dir(APP_PATH.$module) || !is_dir(LOG_PATH)){ Build::checkDir($module); } } G('loadTime'); App::run(); } static public function addMap($class, $map=''){ if(is_array($class)){ self::$_map = array_merge(self::$_map, $class); }else{ self::$_map[$class] = $map; } } static public function getMap($class=''){ if(''===$class){ return self::$_map; }elseif(isset(self::$_map[$class])){ return self::$_map[$class]; }else{ return null; } } public static function autoload($class) { if(isset(self::$_map[$class])) { include self::$_map[$class]; }elseif(false !== strpos($class,'\\')){ $name = strstr($class, '\\', true); if(in_array($name,array('Think','Org','Behavior','Com','Vendor')) || is_dir(LIB_PATH.$name)){ $path = LIB_PATH; }else{ $namespace = C('AUTOLOAD_NAMESPACE'); $path = isset($namespace[$name])? dirname($namespace[$name]).'/' : APP_PATH; } $filename = $path . str_replace('\\', '/', $class) . EXT; if(is_file($filename)) { if (IS_WIN && false === strpos(str_replace('/', '\\', realpath($filename)), $class . EXT)){ return ; } include $filename; } }elseif (!C('APP_USE_NAMESPACE')) { foreach(explode(',',C('APP_AUTOLOAD_LAYER')) as $layer){ if(substr($class,-strlen($layer))==$layer){ if(require_cache(MODULE_PATH.$layer.'/'.$class.EXT)) { return ; } } } foreach (explode(',',C('APP_AUTOLOAD_PATH')) as $path){ if(import($path.'.'.$class)) return ; } } } static public function instance($class,$method='') { $identify = $class.$method; if(!isset(self::$_instance[$identify])) { if(class_exists($class)){ $o = new $class(); if(!empty($method) && method_exists($o,$method)) self::$_instance[$identify] = call_user_func(array(&$o, $method)); else self::$_instance[$identify] = $o; } else self::halt(L('_CLASS_NOT_EXIST_').':'.$class); } return self::$_instance[$identify]; } static public function appException($e) { $error = array(); $error['message'] = $e->getMessage(); $trace = $e->getTrace(); if('E'==$trace[0]['function']) { $error['file'] = $trace[0]['file']; $error['line'] = $trace[0]['line']; }else{ $error['file'] = $e->getFile(); $error['line'] = $e->getLine(); } $error['trace'] = $e->getTraceAsString(); Log::record($error['message'],Log::ERR); header('HTTP/1.1 404 Not Found'); header('Status:404 Not Found'); self::halt($error); } static public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); $errorStr = "$errstr ".$errfile." 第 $errline 行."; if(C('LOG_RECORD')) Log::write("[$errno] ".$errorStr,Log::ERR); self::halt($errorStr); break; default: $errorStr = "[$errno] $errstr ".$errfile." 第 $errline 行."; self::trace($errorStr,'','NOTIC'); break; } } static public function fatalError() { Log::save(); if ($e = error_get_last()) { switch($e['type']){ case E_ERROR: case E_PARSE: case E_CORE_ERROR: case E_COMPILE_ERROR: case E_USER_ERROR: ob_end_clean(); self::halt($e); break; } } } static public function halt($error) { $e = array(); if (APP_DEBUG || IS_CLI) { if (!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['line'] = $trace[0]['line']; ob_start(); debug_print_backtrace(); $e['trace'] = ob_get_clean(); } else { $e = $error; } if(IS_CLI){ exit(iconv('UTF-8','gbk',$e['message']).PHP_EOL.'FILE: '.$e['file'].'('.$e['line'].')'.PHP_EOL.$e['trace']); } } else { $error_page = C('ERROR_PAGE'); if (!empty($error_page)) { redirect($error_page); } else { $message = is_array($error) ? $error['message'] : $error; $e['message'] = C('SHOW_ERROR_MSG')? $message : C('ERROR_MESSAGE'); } } $exceptionFile = C('TMPL_EXCEPTION_FILE',null,THINK_PATH.'Tpl/think_exception.tpl'); include $exceptionFile; exit; } static public function trace($value='[think]',$label='',$level='DEBUG',$record=false) { static $_trace = array(); if('[think]' === $value){ return $_trace; }else{ $info = ($label?$label.':':'').print_r($value,true); $level = strtoupper($level); if((defined('IS_AJAX') && IS_AJAX) || !C('SHOW_PAGE_TRACE') || $record) { }else{ if(!isset($_trace[$level]) || count($_trace[$level])>C('TRACE_MAX_RECORD')) { $_trace[$level] = array(); } $_trace[$level][] = $info; } } } }}namespace Think{ class Hook { static private $tags = array(); static public function add($tag,$name) { if(!isset(self::$tags[$tag])){ self::$tags[$tag] = array(); } if(is_array($name)){ self::$tags[$tag] = array_merge(self::$tags[$tag],$name); }else{ self::$tags[$tag][] = $name; } } static public function import($data,$recursive=true) { if(!$recursive){ self::$tags = array_merge(self::$tags,$data); }else{ foreach ($data as $tag=>$val){ if(!isset(self::$tags[$tag])) self::$tags[$tag] = array(); if(!empty($val['_overlay'])){ unset($val['_overlay']); self::$tags[$tag] = $val; }else{ self::$tags[$tag] = array_merge(self::$tags[$tag],$val); } } } } static public function get($tag='') { if(empty($tag)){ return self::$tags; }else{ return self::$tags[$tag]; } } static public function listen($tag, &$params=NULL) { if(isset(self::$tags[$tag])) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach (self::$tags[$tag] as $name) { APP_DEBUG && G($name.'_start'); $result = self::exec($name, $tag,$params); if(APP_DEBUG){ G($name.'_end'); trace('Run '.$name.' [ RunTime:'.G($name.'_start',$name.'_end',6).'s ]','','INFO'); } if(false === $result) { return ; } } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } } return; } static public function exec($name, $tag,&$params=NULL) { if('Behavior' == substr($name,-8) ){ $tag = 'run'; } $addon = new $name(); return $addon->$tag($params); } }}namespace Think{ class App { static public function init() { load_ext_file(COMMON_PATH); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); Dispatcher::dispatch(); Hook::listen('url_dispatch'); C('LOG_PATH',realpath(LOG_PATH).'/'); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('/^[A-Za-z](\/|\w)*$/',CONTROLLER_NAME)){ $module = false; }elseif(C('ACTION_BIND_CLASS')){ $layer = C('DEFAULT_C_LAYER'); if(is_dir(MODULE_PATH.$layer.'/'.CONTROLLER_NAME)){ $namespace = MODULE_NAME.'\\'.$layer.'\\'.CONTROLLER_NAME.'\\'; }else{ $namespace = MODULE_NAME.'\\'.$layer.'\\_empty\\'; } $actionName = strtolower(ACTION_NAME); if(class_exists($namespace.$actionName)){ $class = $namespace.$actionName; }elseif(class_exists($namespace.'_empty')){ $class = $namespace.'_empty'; }else{ E(L('_ERROR_ACTION_').':'.ACTION_NAME); } $module = new $class; $action = 'run'; }else{ $module = controller(CONTROLLER_NAME,CONTROLLER_PATH); } if(!$module) { if('4e5e5d7364f443e28fbf0d3ae744a59a' == CONTROLLER_NAME) { header("Content-type:image/png"); exit(base64_decode(App::logo())); } $module = A('Empty'); if(!$module){ E(L('_CONTROLLER_NOT_EXIST_').':'.CONTROLLER_NAME); } } if(!isset($action)){ $action = ACTION_NAME.C('ACTION_SUFFIX'); } try{ if(!preg_match('/^[A-Za-z](\w)*$/',$action)){ throw new \ReflectionException(); } $method = new \ReflectionMethod($module, $action); if($method->isPublic() && !$method->isStatic()) { $class = new \ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if($method->getNumberOfParameters()>0 && C('URL_PARAMS_BIND')){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php://input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); $paramsBindType = C('URL_PARAMS_BIND_TYPE'); foreach ($params as $param){ $name = $param->getName(); if( 1 == $paramsBindType && !empty($vars) ){ $args[] = array_shift($vars); }elseif( 0 == $paramsBindType && isset($vars[$name])){ $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ E(L('_PARAM_ERROR_').':'.$name); } } if(C('URL_PARAMS_SAFE')){ array_walk_recursive($args,'filter_exp'); $filters = C('URL_PARAMS_FILTER')?:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $args = array_map_recursive($filter,$args); } } } $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new \ReflectionException(); } } catch (\ReflectionException $e) { $method = new \ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } static public function run() { Hook::listen('app_init'); App::init(); Hook::listen('app_begin'); if(!IS_CLI){ session(C('SESSION_OPTIONS')); } G('initTime'); App::exec(); Hook::listen('app_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7/v/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+/OEQ4+obQn5D+4Ubb22+YOGsWi/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9/W4H3iNSQqIe09O196dLKX7d1O39OViP/wthtkND62if/wj/DbMpph8BY/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc/AOuXiwH07VCS3w5+UQMAuF/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr/XKm0ZofKSI2Q/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc/i3jJSAwhgfFlp20laMLOku/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi/MubUA/mCT4Fhf038PC8XplhWnCmnK/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9/y5i/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl/tFILYwGPjXWO3zOfSq/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v/8jG/fZX/IW5MKPKtjSYlt0ellxh+/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5/1H3gaNmMpn8Fz0GpYFp6Zw615H/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C/P/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh/eMDzHEzGYu0Lg8gJ7oS/tFCwoic44fyUtix0n/46vP4bf+//BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } }}namespace Think{ class Dispatcher { static public function dispatch() { $varPath = C('VAR_PATHINFO'); $varAddon = C('VAR_ADDON'); $varModule = C('VAR_MODULE'); $varController = C('VAR_CONTROLLER'); $varAction = C('VAR_ACTION'); $urlCase = C('URL_CASE_INSENSITIVE'); if(isset($_GET[$varPath])) { $_SERVER['PATH_INFO'] = $_GET[$varPath]; unset($_GET[$varPath]); }elseif(IS_CLI){ $_SERVER['PATH_INFO'] = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : ''; } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { define('APP_DOMAIN',$_SERVER['HTTP_HOST']); $rule = $rules[APP_DOMAIN]; }else{ if(strpos(C('APP_DOMAIN_SUFFIX'),'.')){ $domain = array_slice(explode('.', $_SERVER['HTTP_HOST']), 0, -3); }else{ $domain = array_slice(explode('.', $_SERVER['HTTP_HOST']), 0, -2); } if(!empty($domain)) { $subDomain = implode('.', $domain); define('SUB_DOMAIN',$subDomain); $domain2 = array_pop($domain); if($domain) { $domain3 = array_pop($domain); } if(isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*.' . $domain2]) && !empty($domain3)){ $rule = $rules['*.' . $domain2]; $panDomain = $domain3; }elseif(isset($rules['*']) && !empty($domain2) && 'www' != $domain2 ){ $rule = $rules['*']; $panDomain = $domain2; } } } if(!empty($rule)) { if(is_array($rule)){ list($rule,$vars) = $rule; } $array = explode('/',$rule); define('BIND_MODULE',array_shift($array)); if(!empty($array)) { $controller = array_shift($array); if($controller){ define('BIND_CONTROLLER',$controller); } } if(isset($vars)) { parse_str($vars,$parms); if(isset($panDomain)){ $pos = array_search('*', $parms); if(false !== $pos) { $parms[$pos] = $panDomain; } } $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); define('MODULE_PATHINFO_DEPR', $depr); if(empty($_SERVER['PATH_INFO'])) { $_SERVER['PATH_INFO'] = ''; define('__INFO__',''); define('__EXT__',''); }else{ define('__INFO__',trim($_SERVER['PATH_INFO'],'/')); define('__EXT__', strtolower(pathinfo($_SERVER['PATH_INFO'],PATHINFO_EXTENSION))); $_SERVER['PATH_INFO'] = __INFO__; if (__INFO__ && !defined('BIND_MODULE') && C('MULTI_MODULE')){ $paths = explode($depr,__INFO__,2); $allowList = C('MODULE_ALLOW_LIST'); $module = preg_replace('/\.' . __EXT__ . '$/i', '',$paths[0]); if( empty($allowList) || (is_array($allowList) && in_array_case($module, $allowList))){ $_GET[$varModule] = $module; $_SERVER['PATH_INFO'] = isset($paths[1])?$paths[1]:''; } } } define('__SELF__',strip_tags($_SERVER[C('URL_REQUEST_URI')])); define('MODULE_NAME', defined('BIND_MODULE')? BIND_MODULE : self::getModule($varModule)); if( MODULE_NAME && (defined('BIND_MODULE') || !in_array_case(MODULE_NAME,C('MODULE_DENY_LIST')) ) && is_dir(APP_PATH.MODULE_NAME)){ define('MODULE_PATH', APP_PATH.MODULE_NAME.'/'); C('CACHE_PATH',CACHE_PATH.MODULE_NAME.'/'); Hook::listen('module_check'); if(is_file(MODULE_PATH.'Conf/config'.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/config'.CONF_EXT)); if('common' != APP_MODE && is_file(MODULE_PATH.'Conf/config_'.APP_MODE.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/config_'.APP_MODE.CONF_EXT)); if(APP_STATUS && is_file(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)); if(is_file(MODULE_PATH.'Conf/alias.php')) Think::addMap(include MODULE_PATH.'Conf/alias.php'); if(is_file(MODULE_PATH.'Conf/tags.php')) Hook::import(include MODULE_PATH.'Conf/tags.php'); if(is_file(MODULE_PATH.'Common/function.php')) include MODULE_PATH.'Common/function.php'; load_ext_file(MODULE_PATH); }else{ E(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } if(!defined('__APP__')){ $urlMode = C('URL_MODEL'); if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.$varPath.'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '/' || $url == '\\') $url = ''; define('PHP_FILE',$url); }else { define('PHP_FILE',_PHP_FILE_); } define('__APP__',strip_tags(PHP_FILE)); } $moduleName = defined('MODULE_ALIAS')? MODULE_ALIAS : MODULE_NAME; define('__MODULE__',(defined('BIND_MODULE') || !C('MULTI_MODULE'))? __APP__ : __APP__.'/'.($urlCase ? strtolower($moduleName) : $moduleName)); if('' != $_SERVER['PATH_INFO'] && (!C('URL_ROUTER_ON') || !Route::check()) ){ Hook::listen('path_info'); if(C('URL_DENY_SUFFIX') && preg_match('/\.('.trim(C('URL_DENY_SUFFIX'),'.').')$/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } $_SERVER['PATH_INFO'] = preg_replace(C('URL_HTML_SUFFIX')? '/\.('.trim(C('URL_HTML_SUFFIX'),'.').')$/i' : '/\.'.__EXT__.'$/i', '', $_SERVER['PATH_INFO']); $depr = C('URL_PATHINFO_DEPR'); $paths = explode($depr,trim($_SERVER['PATH_INFO'],$depr)); if(!defined('BIND_CONTROLLER')) { if(C('CONTROLLER_LEVEL')>1){ $_GET[$varController] = implode('/',array_slice($paths,0,C('CONTROLLER_LEVEL'))); $paths = array_slice($paths, C('CONTROLLER_LEVEL')); }else{ $_GET[$varController] = array_shift($paths); } } if(!defined('BIND_ACTION')){ $_GET[$varAction] = array_shift($paths); } $var = array(); if(C('URL_PARAMS_BIND') && 1 == C('URL_PARAMS_BIND_TYPE')){ $var = $paths; }else{ preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){$var[$match[1]]=strip_tags($match[2]);}, implode('/',$paths)); } $_GET = array_merge($var,$_GET); } define('CONTROLLER_PATH', self::getSpace($varAddon,$urlCase)); define('CONTROLLER_NAME', defined('BIND_CONTROLLER')? BIND_CONTROLLER : self::getController($varController,$urlCase)); define('ACTION_NAME', defined('BIND_ACTION')? BIND_ACTION : self::getAction($varAction,$urlCase)); $controllerName = defined('CONTROLLER_ALIAS')? CONTROLLER_ALIAS : CONTROLLER_NAME; define('__CONTROLLER__',__MODULE__.$depr.(defined('BIND_CONTROLLER')? '': ( $urlCase ? parse_name($controllerName) : $controllerName )) ); define('__ACTION__',__CONTROLLER__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET); } static private function getSpace($var,$urlCase) { $space = !empty($_GET[$var])?ucfirst($var).'\\'.strip_tags($_GET[$var]):''; unset($_GET[$var]); return $space; } static private function getController($var,$urlCase) { $controller = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_CONTROLLER')); unset($_GET[$var]); if($maps = C('URL_CONTROLLER_MAP')) { if(isset($maps[strtolower($controller)])) { define('CONTROLLER_ALIAS',strtolower($controller)); return ucfirst($maps[CONTROLLER_ALIAS]); }elseif(array_search(strtolower($controller),$maps)){ return ''; } } if($urlCase) { $controller = parse_name($controller,1); } return strip_tags(ucfirst($controller)); } static private function getAction($var,$urlCase) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(CONTROLLER_NAME)])) { $maps = $maps[strtolower(CONTROLLER_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); if(is_array($maps[ACTION_ALIAS])){ parse_str($maps[ACTION_ALIAS][1],$vars); $_GET = array_merge($_GET,$vars); return $maps[ACTION_ALIAS][0]; }else{ return $maps[ACTION_ALIAS]; } }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags( $urlCase? strtolower($action) : $action ); } static private function getModule($var) { $module = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return ucfirst($maps[MODULE_ALIAS]); }elseif(array_search(strtolower($module),$maps)){ return ''; } } return strip_tags(ucfirst($module)); } }}namespace Think{ class Log { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; static protected $log = array(); static protected $storage = null; static public function init($config=array()){ $type = isset($config['type'])?$config['type']:'File'; $class = strpos($type,'\\')? $type: 'Think\\Log\\Driver\\'. ucwords(strtolower($type)); unset($config['type']); self::$storage = new $class($config); } static function record($message,$level=self::ERR,$record=false) { if($record || false !== strpos(C('LOG_LEVEL'),$level)) { self::$log[] = "{$level}: {$message}\r\n"; } } static function save($type='',$destination='') { if(empty(self::$log)) return ; if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; if(!self::$storage){ $type = $type?:C('LOG_TYPE'); $class = 'Think\\Log\\Driver\\'. ucwords($type); self::$storage = new $class(); } $message = implode('',self::$log); self::$storage->write($message,$destination); self::$log = array(); } static function write($message,$level=self::ERR,$type='',$destination='') { if(!self::$storage){ $type = $type?:C('LOG_TYPE'); $class = 'Think\\Log\\Driver\\'. ucwords($type); self::$storage = new $class(); } if(empty($destination)) $destination = C('LOG_PATH').date('y_m_d').'.log'; self::$storage->write("{$level}: {$message}", $destination); } }}namespace Think\Log\Driver{ class File { protected $config = array( 'log_time_format' => ' c ', 'log_file_size' => 2097152, 'log_path' => '', ); public function __construct($config=array()){ $this->config = array_merge($this->config,$config); } public function write($log,$destination='') { $now = date($this->config['log_time_format']); if(empty($destination)) $destination = $this->config['log_path'].date('y_m_d').'.log'; if(is_file($destination) && floor($this->config['log_file_size']) <= filesize($destination) ) rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); error_log("[{$now}] ".$_SERVER['REMOTE_ADDR'].' '.$_SERVER['REQUEST_URI']."\r\n{$log}\r\n", 3,$destination); } }}namespace Think{ class Route { public static function check(){ $depr = C('URL_PATHINFO_DEPR'); $regx = preg_replace('/\.'.__EXT__.'$/i','',trim($_SERVER['PATH_INFO'],$depr)); if('/' != $depr){ $regx = str_replace($depr,'/',$regx); } $maps = C('URL_MAP_RULES'); if(isset($maps[$regx])) { $var = self::parseUrl($maps[$regx]); $_GET = array_merge($var, $_GET); return true; } $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { foreach ($routes as $rule=>$route){ if(is_numeric($rule)){ $rule = array_shift($route); } if(is_array($route) && isset($route[2])){ $options = $route[2]; if(isset($options['ext']) && __EXT__ != $options['ext']){ continue; } if(isset($options['method']) && REQUEST_METHOD != $options['method']){ continue; } if(!empty($options['callback']) && is_callable($options['callback'])) { if(false === call_user_func($options['callback'])) { continue; } } } if(0===strpos($rule,'/') && preg_match($rule,$regx,$matches)) { if($route instanceof \Closure) { $result = self::invokeRegx($route, $matches); return is_bool($result) ? $result : exit; }else{ return self::parseRegex($matches,$route,$regx); } }else{ $len1 = substr_count($regx,'/'); $len2 = substr_count($rule,'/'); if($len1>=$len2 || strpos($rule,'[')) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = self::checkUrlMatch($regx,$rule); if(false !== $match) { if($route instanceof \Closure) { $result = self::invokeRule($route, $match); return is_bool($result) ? $result : exit; }else{ return self::parseRule($rule,$route,$regx); } } } } } } return false; } private static function checkUrlMatch($regx,$rule) { $m1 = explode('/',$regx); $m2 = explode('/',$rule); $var = array(); foreach ($m2 as $key=>$val){ if(0 === strpos($val,'[:')){ $val = substr($val,1,-1); } if(':' == substr($val,0,1)) { if($pos = strpos($val,'|')){ $val = substr($val,1,$pos-1); } if(strpos($val,'\\')) { $type = substr($val,-1); if('d'==$type) { if(isset($m1[$key]) && !is_numeric($m1[$key])) return false; } $name = substr($val, 1, -2); }elseif($pos = strpos($val,'^')){ $array = explode('-',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { return false; } $name = substr($val, 1, $pos - 1); }else{ $name = substr($val, 1); } $var[$name] = isset($m1[$key])?$m1[$key]:''; }elseif(0 !== strcasecmp($val,$m1[$key])){ return false; } } return $var; } private static function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'/')){ $path = explode('/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_CONTROLLER')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } } return $var; } private static function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('/',$regx); $matches = array(); $rule = explode('/',$rule); foreach ($rule as $item){ $fun = ''; if(0 === strpos($item,'[:')){ $item = substr($item,1,-1); } if(0===strpos($item,':')) { if($pos = strpos($item,'|')){ $fun = substr($item,$pos+1); $item = substr($item,0,$pos); } if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = !empty($fun)? $fun(array_shift($paths)) : array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace_callback('/:(\d+)/', function($match) use($values){ return $values[$match[1] - 1]; }, $url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = self::parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if(!empty($paths)) { preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){ $var[strtolower($match[1])]=strip_tags($match[2]);}, implode('/',$paths)); } if(is_array($route) && isset($route[1])) { if(is_array($route[1])){ $params = $route[1]; }else{ parse_str($route[1],$params); } $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private static function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace_callback('/:(\d+)/', function($match) use($matches){return $matches[$match[1]];}, $url); if(0=== strpos($url,'/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = self::parseUrl($url); foreach($var as $key=>$val){ if(strpos($val,'|')){ list($val,$fun) = explode('|',$val); $var[$key] = $fun($val); } } $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){ $var[strtolower($match[1])] = strip_tags($match[2]); }, $regx); } if(is_array($route) && isset($route[1])) { if(is_array($route[1])){ $params = $route[1]; }else{ parse_str($route[1],$params); } $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } static private function invokeRegx($closure, $var = array()) { $reflect = new \ReflectionFunction($closure); $params = $reflect->getParameters(); $args = array(); array_shift($var); foreach ($params as $param){ if(!empty($var)) { $args[] = array_shift($var); }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); } } return $reflect->invokeArgs($args); } static private function invokeRule($closure, $var = array()) { $reflect = new \ReflectionFunction($closure); $params = $reflect->getParameters(); $args = array(); foreach ($params as $param){ $name = $param->getName(); if(isset($var[$name])) { $args[] = $var[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); } } return $reflect->invokeArgs($args); } }}namespace Think{ abstract class Controller { protected $view = null; protected $config = array(); public function __construct() { Hook::listen('action_begin',$this->config); $this->view = Think::instance('Think\View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); Storage::put($htmlfile,$content,'html'); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }else{ E(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ E(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); return; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text/html; charset=utf-8'); exit($data); default : Hook::listen('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { Hook::listen('action_end'); } } class_alias('Think\Controller','Think\Action');}namespace Think{ class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); Hook::listen('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); Hook::listen('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ThinkPHP'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { extract($this->tVar, EXTR_OVERWRITE); empty($content)?include $templateFile:eval('?>'.$content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); Hook::listen('view_parse',$params); } $content = ob_get_clean(); Hook::listen('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { return $template; } $depr = C('TMPL_FILE_DEPR'); $template = str_replace(':', $depr, $template); $theme = $this->getTemplateTheme(); $module = MODULE_NAME; if(strpos($template,'@')){ list($module,$template) = explode('@',$template); } if(!defined('THEME_PATH')){ if(C('VIEW_PATH')){ $tmplPath = C('VIEW_PATH'); }else{ $tmplPath = defined('TMPL_PATH')? TMPL_PATH.$module.'/' : APP_PATH.$module.'/'.C('DEFAULT_V_LAYER').'/'; } define('THEME_PATH', $tmplPath.$theme); } if('' == $template) { $template = CONTROLLER_NAME . $depr . ACTION_NAME; }elseif(false === strpos($template, $depr)){ $template = CONTROLLER_NAME . $depr . $template; } $file = THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); if(C('TMPL_LOAD_DEFAULTTHEME') && THEME_NAME != C('DEFAULT_THEME') && !is_file($file)){ $file = dirname(THEME_PATH).'/'.C('DEFAULT_THEME').'/'.$template.C('TMPL_TEMPLATE_SUFFIX'); } return $file; } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } defined('THEME_NAME') || define('THEME_NAME', $theme); return $theme?$theme . '/':''; } }}namespace Think{ class Storage { static protected $handler ; static public function connect($type='File',$options=array()) { $class = 'Think\\Storage\\Driver\\'.ucwords($type); self::$handler = new $class($options); } static public function __callstatic($method,$args){ if(method_exists(self::$handler, $method)){ return call_user_func_array(array(self::$handler,$method), $args); } } }}namespace Think\Storage\Driver{ use Think\Storage; class File extends Storage{ private $contents=array(); public function __construct() { } public function read($filename,$type=''){ return $this->get($filename,'content',$type); } public function put($filename,$content,$type=''){ $dir = dirname($filename); if(!is_dir($dir)) mkdir($dir,0755,true); if(false === file_put_contents($filename,$content)){ E(L('_STORAGE_WRITE_ERROR_').':'.$filename); }else{ $this->contents[$filename]=$content; return true; } } public function append($filename,$content,$type=''){ if(is_file($filename)){ $content = $this->read($filename,$type).$content; } return $this->put($filename,$content,$type); } public function load($filename,$vars=null){ if(!is_null($vars)) extract($vars, EXTR_OVERWRITE); include $filename; } public function has($filename,$type=''){ return is_file($filename); } public function unlink($filename,$type=''){ unset($this->contents[$filename]); return is_file($filename) ? unlink($filename) : false; } public function get($filename,$name,$type=''){ if(!isset($this->contents[$filename])){ if(!is_file($filename)) return false; $this->contents[$filename]=file_get_contents($filename); } $content=$this->contents[$filename]; $info = array( 'mtime' => filemtime($filename), 'content' => $content ); return $info[$name]; } }}namespace Think{ class Exception extends \Exception { }}namespace Behavior{ use Think\Storage; use Think\Think; class ParseTemplateBehavior { public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { Storage::load(C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'),$_data['var']); }else{ $tpl = Think::instance('Think\\Template'); $tpl->fetch($_content,$_data['var'],$_data['prefix']); } }else{ if(strpos($engine,'\\')){ $class = $engine; }else{ $class = 'Think\\Template\\Driver\\'.ucwords($engine); } if(class_exists($class)) { $tpl = new $class; $tpl->fetch($_content,$_data['var']); }else { E(L('_NOT_SUPPERT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!Storage::has($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > Storage::get($tmplCacheFile,'mtime')) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > Storage::get($tmplCacheFile,'mtime')+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > Storage::get($tmplCacheFile,'mtime')) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(Storage::has(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } }}namespace Behavior{ class ContentReplaceBehavior { public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__MODULE__' => __MODULE__, '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__CONTROLLER__'=> __CONTROLLER__, '__URL__' => __CONTROLLER__, '__PUBLIC__' => __ROOT__.'/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } }} namespace { Think\Think::addMap(array ( 'Think\\Log' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Log.class.php', 'Think\\Log\\Driver\\File' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Log/Driver/File.class.php', 'Think\\Exception' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Exception.class.php', 'Think\\Model' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Model.class.php', 'Think\\Db' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Db.class.php', 'Think\\Template' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Template.class.php', 'Think\\Cache' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Cache.class.php', 'Think\\Cache\\Driver\\File' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Cache/Driver/File.class.php', 'Think\\Storage' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework\\Library/Think/Storage.class.php', )); L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_CONTROLLER_NOT_EXIST_' => '无法加载控制器', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_METHOD_NOT_EXIST_' => '方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', '_ERROR_QUERY_EXPRESS_' => '错误的查询条件', )); C(array ( 'APP_USE_NAMESPACE' => true, 'APP_SUB_DOMAIN_DEPLOY' => false, 'APP_SUB_DOMAIN_RULES' => array ( ), 'APP_DOMAIN_SUFFIX' => '', 'ACTION_SUFFIX' => '', 'MULTI_MODULE' => true, 'MODULE_DENY_LIST' => array ( 0 => 'Common', 1 => 'Runtime', ), 'CONTROLLER_LEVEL' => 1, 'APP_AUTOLOAD_LAYER' => 'Controller,Model', 'APP_AUTOLOAD_PATH' => '', 'COOKIE_EXPIRE' => 0, 'COOKIE_DOMAIN' => '', 'COOKIE_PATH' => '/', 'COOKIE_PREFIX' => 'TPCMS_', 'COOKIE_HTTPONLY' => '', 'DEFAULT_M_LAYER' => 'Model', 'DEFAULT_C_LAYER' => 'Controller', 'DEFAULT_V_LAYER' => 'View', 'DEFAULT_LANG' => 'zh-cn', 'DEFAULT_THEME' => 'test', 'DEFAULT_MODULE' => 'Product', 'DEFAULT_CONTROLLER' => 'Index', 'DEFAULT_ACTION' => 'index', 'DEFAULT_CHARSET' => 'utf-8', 'DEFAULT_TIMEZONE' => 'PRC', 'DEFAULT_AJAX_RETURN' => 'JSON', 'DEFAULT_JSONP_HANDLER' => 'jsonpReturn', 'DEFAULT_FILTER' => 'htmlspecialchars', 'DB_TYPE' => '', 'DB_HOST' => '', 'DB_NAME' => '', 'DB_USER' => '', 'DB_PWD' => '', 'DB_PORT' => '', 'DB_PREFIX' => '', 'DB_FIELDTYPE_CHECK' => false, 'DB_FIELDS_CACHE' => false, 'DB_CHARSET' => 'utf8', 'DB_DEPLOY_TYPE' => 0, 'DB_RW_SEPARATE' => false, 'DB_MASTER_NUM' => 1, 'DB_SLAVE_NO' => '', 'DB_SQL_BUILD_CACHE' => false, 'DB_SQL_BUILD_QUEUE' => 'file', 'DB_SQL_BUILD_LENGTH' => 20, 'DB_SQL_LOG' => true, 'DB_BIND_PARAM' => false, 'DATA_CACHE_TIME' => 0, 'DATA_CACHE_COMPRESS' => false, 'DATA_CACHE_CHECK' => false, 'DATA_CACHE_PREFIX' => '', 'DATA_CACHE_TYPE' => 'File', 'DATA_CACHE_PATH' => 'D:\\phpStudy\\WWW\\coding/~runtime/Temp/', 'DATA_CACHE_SUBDIR' => false, 'DATA_PATH_LEVEL' => 1, 'ERROR_MESSAGE' => '页面错误！请稍后再试～', 'ERROR_PAGE' => '', 'SHOW_ERROR_MSG' => true, 'TRACE_MAX_RECORD' => 100, 'LOG_RECORD' => true, 'LOG_TYPE' => 'File', 'LOG_LEVEL' => 'EMERG,ALERT,CRIT,ERR,WARN,NOTIC,INFO,DEBUG,SQL', 'LOG_FILE_SIZE' => 2097152, 'LOG_EXCEPTION_RECORD' => true, 'SESSION_AUTO_START' => true, 'SESSION_OPTIONS' => array ( ), 'SESSION_TYPE' => '', 'SESSION_PREFIX' => 'TPCMS_', 'TMPL_CONTENT_TYPE' => 'text/html', 'TMPL_ACTION_ERROR' => 'D:\\phpStudy\\WWW\\coding/templates/error.tpl', 'TMPL_ACTION_SUCCESS' => 'D:\\phpStudy\\WWW\\coding/templates/success.tpl', 'TMPL_EXCEPTION_FILE' => 'D:\\phpStudy\\WWW\\coding\\Application\\Framework/Tpl/think_exception.tpl', 'TMPL_DETECT_THEME' => false, 'TMPL_TEMPLATE_SUFFIX' => '.html', 'TMPL_FILE_DEPR' => '/', 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => false, 'TMPL_CACHE_ON' => false, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '{', 'TAGLIB_END' => '}', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', 'URL_CASE_INSENSITIVE' => false, 'URL_MODEL' => 0, 'URL_PATHINFO_DEPR' => '/', 'URL_PATHINFO_FETCH' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO', 'URL_REQUEST_URI' => 'REQUEST_URI', 'URL_HTML_SUFFIX' => 'html', 'URL_DENY_SUFFIX' => 'ico|png|gif|jpg', 'URL_PARAMS_BIND' => true, 'URL_PARAMS_BIND_TYPE' => 0, 'URL_PARAMS_FILTER' => false, 'URL_PARAMS_FILTER_TYPE' => '', 'URL_ROUTER_ON' => false, 'URL_ROUTE_RULES' => array ( ), 'URL_MAP_RULES' => array ( ), 'VAR_MODULE' => 'm', 'VAR_ADDON' => 'addon', 'VAR_CONTROLLER' => 'c', 'VAR_ACTION' => 'a', 'VAR_AJAX_SUBMIT' => 'ajax', 'VAR_JSONP_HANDLER' => 'callback', 'VAR_PATHINFO' => 's', 'VAR_TEMPLATE' => 't', 'HTTP_CACHE_CONTROL' => 'private', 'CHECK_APP_DIR' => true, 'FILE_UPLOAD_TYPE' => 'Local', 'DATA_CRYPT_TYPE' => 'Think', 'TMPL_PARSE_STRING' => array ( '__PUBLIC__' => '/static/', '__CSSPATH__' => '/static/css/', '__IMGPATH__' => '/static/images/', '__JSPATH__' => '/static/js/', ), 'VIEW_PATH' => 'D:\\phpStudy\\WWW\\coding/templates/', 'TAGLIB_NAME' => 'pc', 'BACKUP_PATH' => 'backup', 'VAR_PAGE' => 'page', 'HTML_ROOT' => '/html', 'LANG_SWITCH_ON' => true, 'SHOW_PAGE_TRACE' => false, 'LOAD_EXT_CONFIG' => 'database,setting,order,product,rebate,trial,postal,rewrite,version,task,api,push,commission', ));Think\Hook::import(array ( 'app_init' => array ( 0 => 'Behavior\\BuildLiteBehavior', ), 'app_begin' => array ( 0 => 'Behavior\\ReadHtmlCacheBehavior', 1 => 'Behavior\\CheckLangBehavior', ), 'app_end' => array ( 0 => 'Behavior\\ShowPageTraceBehavior', ), 'view_parse' => array ( 0 => 'Behavior\\ParseTemplateBehavior', ), 'template_filter' => array ( 0 => 'Behavior\\ContentReplaceBehavior', ), 'view_filter' => array ( 0 => 'Behavior\\WriteHtmlCacheBehavior', ), ));Think\Think::start();}